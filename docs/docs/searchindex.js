Search.setIndex({"docnames": ["glossary", "index", "komm.APSKModulation", "komm.ASKModulation", "komm.AWGNChannel", "komm.BCHCode", "komm.BarkerSequence", "komm.BinaryErasureChannel", "komm.BinaryPolynomial", "komm.BinaryPolynomialFraction", "komm.BinarySequence", "komm.BinarySymmetricChannel", "komm.BlockCode", "komm.ComplexModulation", "komm.ConvolutionalCode", "komm.ConvolutionalStreamDecoder", "komm.ConvolutionalStreamEncoder", "komm.CordaroWagnerCode", "komm.CyclicCode", "komm.DiscreteMemorylessChannel", "komm.DiscreteMemorylessSource", "komm.FiniteBifield", "komm.FiniteStateMachine", "komm.FixedToVariableCode", "komm.GaussianPulse", "komm.GolayCode", "komm.GoldSequence", "komm.HammingCode", "komm.HuffmanCode", "komm.KasamiSequence", "komm.LFSRSequence", "komm.LloydMaxQuantizer", "komm.ManchesterPulse", "komm.PAModulation", "komm.PSKModulation", "komm.QAModulation", "komm.RaisedCosinePulse", "komm.RationalPolynomial", "komm.RationalPolynomialFraction", "komm.RealModulation", "komm.ReceiveFilter", "komm.RectangularPulse", "komm.ReedMullerCode", "komm.RepetitionCode", "komm.RootRaisedCosinePulse", "komm.ScalarQuantizer", "komm.SimplexCode", "komm.SincPulse", "komm.SingleParityCheckCode", "komm.TerminatedConvolutionalCode", "komm.TransmitFilter", "komm.TunstallCode", "komm.UniformQuantizer", "komm.VariableToFixedCode", "komm.WalshHadamardSequence", "komm.ZadoffChuSequence", "komm.binlist2int", "komm.entropy", "komm.int2binlist", "komm.pack", "komm.qfunc", "komm.qfuncinv", "komm.unpack", "references"], "filenames": ["glossary.rst", "index.rst", "komm.APSKModulation.rst", "komm.ASKModulation.rst", "komm.AWGNChannel.rst", "komm.BCHCode.rst", "komm.BarkerSequence.rst", "komm.BinaryErasureChannel.rst", "komm.BinaryPolynomial.rst", "komm.BinaryPolynomialFraction.rst", "komm.BinarySequence.rst", "komm.BinarySymmetricChannel.rst", "komm.BlockCode.rst", "komm.ComplexModulation.rst", "komm.ConvolutionalCode.rst", "komm.ConvolutionalStreamDecoder.rst", "komm.ConvolutionalStreamEncoder.rst", "komm.CordaroWagnerCode.rst", "komm.CyclicCode.rst", "komm.DiscreteMemorylessChannel.rst", "komm.DiscreteMemorylessSource.rst", "komm.FiniteBifield.rst", "komm.FiniteStateMachine.rst", "komm.FixedToVariableCode.rst", "komm.GaussianPulse.rst", "komm.GolayCode.rst", "komm.GoldSequence.rst", "komm.HammingCode.rst", "komm.HuffmanCode.rst", "komm.KasamiSequence.rst", "komm.LFSRSequence.rst", "komm.LloydMaxQuantizer.rst", "komm.ManchesterPulse.rst", "komm.PAModulation.rst", "komm.PSKModulation.rst", "komm.QAModulation.rst", "komm.RaisedCosinePulse.rst", "komm.RationalPolynomial.rst", "komm.RationalPolynomialFraction.rst", "komm.RealModulation.rst", "komm.ReceiveFilter.rst", "komm.RectangularPulse.rst", "komm.ReedMullerCode.rst", "komm.RepetitionCode.rst", "komm.RootRaisedCosinePulse.rst", "komm.ScalarQuantizer.rst", "komm.SimplexCode.rst", "komm.SincPulse.rst", "komm.SingleParityCheckCode.rst", "komm.TerminatedConvolutionalCode.rst", "komm.TransmitFilter.rst", "komm.TunstallCode.rst", "komm.UniformQuantizer.rst", "komm.VariableToFixedCode.rst", "komm.WalshHadamardSequence.rst", "komm.ZadoffChuSequence.rst", "komm.binlist2int.rst", "komm.entropy.rst", "komm.int2binlist.rst", "komm.pack.rst", "komm.qfunc.rst", "komm.qfuncinv.rst", "komm.unpack.rst", "references.rst"], "titles": ["Glossary", "Komm", "komm.APSKModulation", "komm.ASKModulation", "komm.AWGNChannel", "komm.BCHCode", "komm.BarkerSequence", "komm.BinaryErasureChannel", "komm.BinaryPolynomial", "komm.BinaryPolynomialFraction", "komm.BinarySequence", "komm.BinarySymmetricChannel", "komm.BlockCode", "komm.ComplexModulation", "komm.ConvolutionalCode", "komm.ConvolutionalStreamDecoder", "komm.ConvolutionalStreamEncoder", "komm.CordaroWagnerCode", "komm.CyclicCode", "komm.DiscreteMemorylessChannel", "komm.DiscreteMemorylessSource", "komm.FiniteBifield", "komm.FiniteStateMachine", "komm.FixedToVariableCode", "komm.GaussianPulse", "komm.GolayCode", "komm.GoldSequence", "komm.HammingCode", "komm.HuffmanCode", "komm.KasamiSequence", "komm.LFSRSequence", "komm.LloydMaxQuantizer", "komm.ManchesterPulse", "komm.PAModulation", "komm.PSKModulation", "komm.QAModulation", "komm.RaisedCosinePulse", "komm.RationalPolynomial", "komm.RationalPolynomialFraction", "komm.RealModulation", "komm.ReceiveFilter", "komm.RectangularPulse", "komm.ReedMullerCode", "komm.RepetitionCode", "komm.RootRaisedCosinePulse", "komm.ScalarQuantizer", "komm.SimplexCode", "komm.SincPulse", "komm.SingleParityCheckCode", "komm.TerminatedConvolutionalCode", "komm.TransmitFilter", "komm.TunstallCode", "komm.UniformQuantizer", "komm.VariableToFixedCode", "komm.WalshHadamardSequence", "komm.ZadoffChuSequence", "komm.binlist2int", "komm.entropy", "komm.int2binlist", "komm.pack", "komm.qfunc", "komm.qfuncinv", "komm.unpack", "References"], "terms": {"i": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 63], "d": [0, 4, 5, 11, 12, 14, 17, 18, 23, 25, 27, 28, 37, 42, 43, 46, 48, 49, 51, 53, 60], "independ": 0, "ident": 0, "distribut": [0, 4, 5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "bsc": [0, 11, 17], "binari": [0, 2, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 21, 23, 25, 26, 27, 29, 30, 33, 34, 35, 37, 39, 42, 43, 46, 48, 49, 53, 54, 56, 58], "symmetr": [0, 11], "channel": [0, 2, 3, 4, 7, 11, 13, 19, 33, 34, 35, 39, 63], "lut": [0, 5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "lookup": 0, "tabl": [0, 5, 6, 12, 14, 17, 18, 21, 22, 25, 27, 30, 42, 43, 46, 48, 49], "msb": [0, 5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "most": [0, 22, 53, 57], "signific": 0, "bit": [0, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 23, 25, 26, 27, 28, 29, 30, 33, 34, 35, 39, 42, 43, 46, 48, 49, 51, 53, 54, 56, 57, 58, 62], "nrz": [0, 41], "non": [0, 5, 7, 11, 12, 17, 18, 19, 23, 25, 27, 42, 43, 46, 48, 49, 53, 57], "return": [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 38, 39, 42, 43, 46, 48, 49, 51, 53, 54, 56, 57, 58, 60, 61], "zero": [0, 4, 5, 8, 12, 15, 17, 18, 25, 27, 37, 42, 43, 46, 48, 49, 58], "pmf": [0, 7, 11, 19, 20, 22, 23, 28, 51, 53, 57], "probabl": [0, 5, 7, 11, 12, 17, 18, 19, 20, 22, 23, 25, 27, 28, 42, 43, 46, 48, 49, 51, 53, 57, 63], "mass": [0, 7, 11, 19, 20, 23, 28, 51, 53, 57], "function": [0, 7, 11, 14, 19, 20, 23, 28, 49, 51, 53, 57, 60, 61], "rz": [0, 41], "welcom": 1, "": [1, 2, 3, 8, 13, 14, 22, 33, 34, 35, 37, 39, 54, 56, 58], "document": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "page": 1, "an": [1, 5, 6, 8, 10, 12, 13, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 35, 37, 39, 42, 43, 45, 46, 48, 49, 51, 54, 58], "open": 1, "librari": 1, "python": [1, 8, 37], "3": [1, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 18, 19, 21, 22, 23, 25, 27, 30, 31, 33, 34, 35, 37, 39, 42, 45, 46, 49, 51, 52, 53, 54, 57], "provid": [1, 22], "tool": 1, "analysi": 1, "simul": 1, "analog": 1, "digit": [1, 8, 63], "commun": [1, 63], "system": 1, "thi": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 53, 54, 58], "project": 1, "inspir": 1, "meant": 1, "compat": 1, "matlab": 1, "toolbox": 1, "includ": 1, "gnu": 1, "radio": 1, "commpi": 1, "sagemath": 1, "licens": 1, "under": 1, "gener": [1, 5, 10, 12, 13, 14, 17, 18, 25, 27, 39, 42, 43, 45, 46, 48, 49], "public": 1, "v3": 1, "0": [1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61], "For": [1, 8, 14, 21, 22, 27, 30, 36, 37, 42, 43, 46, 48, 54], "instal": 1, "instruct": 1, "pleas": 1, "check": [1, 5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "develop": 1, "github": 1, "softwar": 1, "still": 1, "contribut": 1, "ar": [1, 3, 5, 6, 8, 11, 12, 14, 17, 18, 19, 22, 23, 25, 27, 30, 31, 33, 34, 35, 37, 42, 43, 45, 46, 48, 49, 52, 53, 54], "veri": 1, "class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "order": [2, 3, 8, 13, 14, 15, 21, 23, 28, 33, 34, 35, 39, 49, 51, 53, 54], "amplitud": [2, 3, 33, 34, 35], "phase_offset": [2, 3, 34, 35], "label": [2, 3, 13, 33, 34, 35, 39], "natur": [2, 3, 33, 34, 35, 54], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], "phase": [2, 3, 34, 35], "shift": [2, 3, 6, 10, 18, 26, 29, 30, 34, 54], "kei": [2, 3, 5, 18, 22, 34], "apsk": 2, "modul": [2, 3, 13, 33, 34, 35, 39], "It": [2, 3, 4, 5, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 57, 60], "complex": [2, 3, 13, 34, 35, 39], "scheme": [2, 3, 13, 33, 34, 35, 39], "complexmodul": [2, 3, 34, 35], "which": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 17, 18, 19, 22, 23, 25, 26, 27, 29, 30, 33, 34, 35, 39, 41, 42, 43, 46, 48, 49, 52, 53, 54, 57], "constel": [2, 3, 13, 33, 34, 35, 39], "union": 2, "compon": 2, "psk": [2, 34], "pskmodul": 2, "call": [2, 4, 5, 7, 11, 12, 16, 17, 18, 19, 20, 21, 23, 25, 27, 30, 41, 42, 43, 45, 46, 48, 49, 53, 57], "ring": [2, 8, 37], "more": [2, 3, 5, 14, 18, 21, 25, 30, 33, 34, 35, 42], "precis": [2, 3, 33, 34, 35], "mathcal": [2, 3, 7, 11, 13, 19, 20, 22, 23, 28, 33, 34, 35, 39, 51, 53, 57], "bigcup_": 2, "k": [2, 5, 12, 14, 15, 17, 18, 21, 23, 25, 27, 28, 42, 43, 46, 48, 49, 51, 53], "_k": 2, "where": [2, 3, 4, 5, 6, 7, 10, 11, 12, 13, 14, 15, 17, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 53, 54], "number": [2, 3, 5, 12, 13, 14, 15, 17, 18, 20, 21, 22, 25, 27, 31, 33, 34, 35, 37, 39, 42, 43, 45, 46, 48, 49, 50, 52], "left": [2, 12, 25, 27, 34, 46], "a_k": 2, "exp": [2, 3, 34, 35], "mathrm": [2, 3, 4, 5, 7, 11, 13, 19, 20, 21, 22, 23, 24, 28, 33, 34, 35, 39, 42, 51, 52, 53, 54, 57, 60, 61], "j": [2, 3, 13, 14, 34, 35, 63], "frac": [2, 3, 4, 13, 14, 23, 24, 28, 33, 34, 35, 36, 39, 44, 47, 51, 53, 57, 60], "2": [2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 63], "pi": [2, 24, 34, 36, 44, 47, 60], "m_k": 2, "right": [2, 5, 8, 12, 17, 18, 25, 27, 34, 37, 42, 43, 46, 48, 49, 58], "phi_k": 2, "offset": [2, 3, 34, 35], "th": [2, 8, 23, 37, 53, 54, 56, 58], "The": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61], "size": [2, 19, 22, 23, 28, 35, 51, 53], "result": [2, 5, 8, 35, 37, 42, 49], "valu": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 41, 42, 43, 46, 48, 49, 52, 54, 57, 58, 60, 61, 63], "m": [2, 3, 5, 12, 13, 17, 18, 25, 27, 33, 34, 35, 39, 42, 43, 46, 48, 49, 63], "m_0": 2, "m_1": 2, "cdot": [2, 31, 42, 43, 45], "m_": [2, 35], "1": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61, 63], "each": [2, 16, 22, 49], "need": 2, "power": [2, 3, 4, 13, 21, 24, 33, 34, 35, 39, 54], "howev": 2, "construct": [2, 8, 21, 25, 27, 28, 30, 37, 46, 51, 54, 63], "must": [2, 3, 5, 6, 7, 10, 11, 12, 13, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 31, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 54, 57], "depict": [2, 3, 14, 22, 24, 31, 32, 33, 34, 35, 36, 41, 44, 45, 47], "below": [2, 3, 4, 6, 7, 11, 14, 18, 19, 20, 21, 22, 24, 30, 31, 32, 33, 34, 35, 36, 41, 44, 45, 47], "8": [2, 8, 14, 18, 19, 20, 21, 25, 27, 30, 31, 33, 34, 35, 42, 45, 49, 52, 54, 58], "a_0": 2, "a_1": 2, "A": [2, 3, 5, 6, 8, 9, 12, 13, 14, 17, 18, 21, 23, 25, 27, 33, 34, 35, 37, 38, 39, 42, 43, 46, 48, 49, 53, 56, 63], "2a": [2, 35], "phi_0": 2, "phi_1": 2, "properti": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "method": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "__init__": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55], "constructor": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54], "paramet": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 57, 58, 60, 61], "tupl": [2, 23, 27, 35, 46, 53], "int": [2, 3, 5, 6, 8, 10, 12, 13, 14, 15, 16, 17, 18, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 37, 39, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 54, 56, 58], "sum": [2, 7, 11, 19, 57], "float": [2, 3, 4, 5, 7, 11, 12, 17, 18, 19, 20, 22, 23, 24, 25, 27, 28, 31, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 48, 49, 51, 52, 53, 57, 60, 61], "option": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 42, 43, 46, 48, 49, 51, 52, 54, 57, 58], "If": [2, 4, 5, 6, 8, 10, 12, 17, 18, 21, 22, 25, 26, 27, 29, 30, 35, 37, 42, 43, 46, 48, 49, 54, 58], "specifi": [2, 3, 5, 8, 18, 21, 30, 33, 34, 35, 37, 58], "singl": [2, 35, 42, 43, 46, 48], "phi": [2, 3, 34, 35], "assum": [2, 3, 10, 13, 15, 22, 23, 28, 33, 34, 35, 39, 51, 53, 54], "all": [2, 5, 7, 11, 12, 14, 17, 18, 19, 22, 23, 25, 27, 37, 42, 43, 46, 48, 49, 53, 57], "default": [2, 3, 4, 6, 7, 8, 10, 11, 12, 14, 15, 16, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 33, 34, 35, 37, 41, 49, 52, 54, 57], "1d": [2, 3, 5, 6, 7, 8, 10, 11, 12, 13, 14, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 39, 42, 43, 45, 46, 48, 49, 51, 53, 54, 56, 57, 58], "arrai": [2, 3, 4, 5, 6, 7, 8, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 22, 23, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 37, 39, 42, 43, 45, 46, 48, 49, 51, 52, 53, 54, 56, 57, 58, 59, 60, 61, 62], "str": [2, 3, 4, 5, 7, 11, 12, 17, 18, 19, 20, 25, 27, 28, 33, 34, 35, 37, 42, 43, 46, 48, 49, 52, 54, 57], "q": [2, 3, 13, 14, 33, 34, 35, 39, 60, 61], "can": [2, 3, 18, 25, 33, 34, 35], "either": [2, 3, 10, 12, 14, 18, 21, 28, 30, 33, 34, 35], "integ": [2, 3, 5, 8, 12, 13, 14, 17, 18, 21, 22, 23, 25, 27, 30, 33, 34, 35, 39, 42, 43, 46, 48, 49, 53, 56, 58, 59], "case": [2, 3, 7, 11, 19, 30, 32, 33, 34, 35, 41, 57], "permut": [2, 3, 13, 33, 34, 35, 39, 54], "string": [2, 3, 4, 7, 11, 12, 19, 20, 23, 33, 34, 35, 53, 57], "equal": [2, 3, 4, 5, 12, 13, 15, 17, 18, 19, 20, 22, 23, 25, 27, 30, 33, 34, 35, 39, 42, 43, 46, 48, 49, 53], "exampl": [2, 3, 4, 5, 6, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 31, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 56, 57, 58, 60, 61], "np": [2, 4, 8, 15, 25, 31, 34, 37, 42, 45, 52], "round": 2, "4": [2, 3, 5, 6, 8, 11, 12, 14, 18, 20, 21, 24, 27, 30, 31, 33, 34, 35, 37, 42, 44, 45, 46, 48, 52, 57], "7071": 2, "7071j": 2, "8478": 2, "7654j": 2, "7654": 2, "8478j": 2, "bits_per_symbol": [2, 3, 13, 33, 34, 35, 39], "per": [2, 3, 4, 13, 14, 23, 28, 33, 34, 35, 39, 50, 51, 53], "symbol": [2, 3, 13, 20, 23, 24, 28, 33, 34, 35, 36, 39, 44, 47, 50, 51, 53], "given": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 57, 59, 60, 62], "log_2": [2, 3, 4, 13, 33, 34, 35, 39], "read": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 24, 25, 27, 28, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51], "onli": [2, 3, 5, 6, 7, 8, 11, 12, 13, 14, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 30, 32, 33, 34, 35, 36, 37, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 53], "bits_to_symbol": [2, 3, 13, 33, 34, 35, 39], "convert": [2, 3, 13, 14, 18, 21, 30, 33, 34, 35, 39, 56, 58], "us": [2, 3, 5, 7, 8, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 25, 27, 28, 33, 34, 35, 37, 39, 42, 43, 46, 48, 49, 51, 57], "should": [2, 3, 13, 22, 23, 31, 33, 34, 35, 39, 45, 53, 54, 61], "set": [2, 3, 6, 10, 12, 13, 22, 23, 25, 27, 33, 34, 35, 39, 46, 53, 54], "Its": [2, 3, 5, 12, 13, 17, 18, 23, 25, 27, 28, 33, 34, 35, 39, 42, 43, 46, 48, 49, 51, 53, 57], "length": [2, 3, 5, 6, 8, 10, 12, 13, 14, 15, 17, 18, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 35, 36, 37, 39, 42, 43, 44, 45, 46, 47, 48, 49, 51, 53, 54, 58], "multipl": [2, 3, 8, 9, 13, 21, 23, 28, 33, 34, 35, 37, 38, 39, 51, 53], "correspond": [2, 3, 4, 5, 7, 10, 11, 12, 13, 14, 15, 17, 18, 22, 23, 25, 27, 28, 30, 33, 34, 35, 39, 42, 43, 46, 48, 49, 51, 53], "divid": [2, 3, 6, 10, 13, 26, 29, 30, 33, 34, 35, 39, 54], "channel_snr": [2, 3, 13, 33, 34, 35, 39], "signal": [2, 3, 4, 7, 11, 13, 19, 33, 34, 35, 39, 45, 52, 54], "nois": [2, 3, 4, 13, 33, 34, 35, 39], "ratio": [2, 3, 4, 5, 9, 12, 13, 17, 18, 25, 27, 33, 34, 35, 38, 39, 42, 43, 46, 48, 49], "snr": [2, 3, 4, 13, 33, 34, 35, 39], "soft": [2, 3, 5, 12, 13, 15, 17, 18, 25, 27, 33, 34, 35, 39, 42, 43, 46, 48, 49], "decis": [2, 3, 5, 12, 13, 17, 18, 25, 27, 33, 34, 35, 39, 42, 43, 46, 48, 49], "write": [2, 3, 4, 7, 11, 13, 19, 20, 33, 34, 35, 39], "demodul": [2, 3, 13, 33, 34, 35, 39], "receiv": [2, 3, 5, 12, 13, 17, 18, 19, 25, 27, 33, 34, 35, 39, 40, 42, 43, 46, 48, 49], "decision_method": [2, 3, 13, 33, 34, 35, 39], "hard": [2, 3, 5, 12, 13, 15, 17, 18, 25, 27, 33, 34, 35, 39, 42, 43, 46, 48, 49], "sequenc": [2, 3, 6, 10, 13, 22, 23, 26, 28, 29, 30, 33, 34, 35, 39, 49, 51, 53, 54, 55], "point": [2, 3, 8, 13, 33, 34, 35, 37, 39, 52], "energy_per_bit": [2, 3, 13, 33, 34, 35, 39], "averag": [2, 3, 4, 13, 33, 34, 35, 39], "energi": [2, 3, 13, 33, 34, 35, 39], "e_": [2, 3, 13, 33, 34, 35, 39], "b": [2, 3, 6, 10, 13, 14, 24, 26, 29, 30, 33, 34, 35, 39, 54], "equiprob": [2, 3, 13, 33, 34, 35, 39], "energy_per_symbol": [2, 3, 13, 33, 34, 35, 39], "sum_": [2, 3, 6, 10, 13, 14, 26, 29, 30, 33, 34, 35, 39, 54, 57], "s_i": [2, 3, 13, 33, 34, 35, 39], "minimum_dist": [2, 3, 5, 12, 13, 17, 18, 25, 27, 33, 34, 35, 39, 42, 43, 46, 48, 49], "minimum": [2, 3, 5, 12, 13, 17, 18, 25, 27, 33, 34, 35, 39, 42, 43, 46, 48, 49], "euclidean": [2, 3, 4, 8, 13, 33, 34, 35, 39], "distanc": [2, 3, 5, 12, 13, 17, 18, 25, 27, 33, 34, 35, 39, 42, 43, 46, 48, 49], "its": [2, 3, 4, 5, 7, 8, 11, 12, 13, 14, 17, 18, 19, 23, 25, 27, 28, 33, 34, 35, 37, 39, 42, 43, 46, 48, 49, 51, 53, 56, 57, 58], "symbols_to_bit": [2, 3, 13, 33, 34, 35, 39], "mai": [2, 3, 5, 10, 11, 12, 13, 14, 17, 18, 22, 25, 27, 33, 34, 35, 39, 42, 43, 46, 48, 49, 58, 60], "ani": [2, 3, 8, 13, 23, 33, 34, 35, 37, 39, 53, 58, 60], "multipli": [2, 3, 13, 33, 34, 35, 39], "base_amplitud": [3, 33, 35], "reflect": [3, 33, 34], "ask": 3, "uniformli": [3, 33, 34], "arrang": [3, 33, 34], "rai": 3, "ia": 3, "base": [3, 5, 7, 11, 12, 17, 18, 19, 20, 21, 25, 27, 33, 35, 42, 43, 46, 48, 49, 57], "one": [3, 5, 10, 12, 18, 26, 29, 33, 34, 35, 49, 52, 54], "grai": [3, 33, 34, 35, 54], "code": [3, 5, 12, 14, 15, 16, 17, 18, 23, 25, 27, 28, 33, 34, 35, 42, 43, 46, 48, 49, 51, 53, 54, 63], "6": [3, 5, 7, 8, 11, 12, 14, 18, 19, 21, 22, 30, 33, 35, 37, 42, 49, 51], "99": 3, "3j": 3, "01": [3, 6], "5j": 3, "7j": 3, "5": [3, 4, 5, 6, 7, 11, 14, 15, 18, 19, 20, 21, 23, 24, 28, 30, 31, 35, 37, 39, 41, 42, 43, 45, 48, 52, 60, 61], "9j": 3, "inf": 4, "signal_pow": 4, "addit": [4, 8, 37], "white": 4, "gaussian": [4, 24, 60, 61], "awgn": 4, "defin": [4, 6, 10, 11, 13, 14, 19, 20, 22, 23, 26, 29, 30, 39, 42, 45, 53, 54], "y_n": [4, 11], "x_n": [4, 11], "z_n": [4, 11], "input": [4, 5, 7, 11, 12, 14, 15, 17, 18, 19, 22, 25, 27, 31, 42, 43, 45, 46, 48, 49, 50, 52, 56, 58, 60, 61], "output": [4, 7, 8, 11, 14, 15, 19, 22, 30, 31, 37, 45, 49, 50, 56, 58], "accord": [4, 30], "mean": 4, "calcul": 4, "p": [4, 11, 12, 14, 21, 22, 30, 42, 52], "n": [4, 5, 6, 10, 12, 14, 17, 18, 23, 25, 26, 27, 28, 29, 30, 42, 43, 46, 48, 49, 51, 53, 54, 63], "e": [4, 7, 11, 19, 20, 24, 57, 60], "x": [4, 5, 7, 8, 11, 18, 19, 20, 21, 22, 23, 28, 30, 31, 37, 45, 51, 52, 53, 57, 60, 61], "2_n": 4, "z": [4, 6, 10, 22, 26, 29, 30, 54], "varianc": 4, "see": [4, 5, 7, 8, 11, 14, 18, 19, 20, 21, 22, 30, 42, 45, 57], "ct06": [4, 7, 11, 19, 57, 63], "ch": [4, 5, 7, 11, 12, 19, 57], "9": [4, 18, 19, 21, 30, 35, 42], "To": [4, 7, 11, 19, 20, 21, 45, 49], "invok": [4, 7, 11, 19, 20, 45], "object": [4, 7, 8, 11, 19, 20, 21, 37, 45], "give": [4, 7, 11, 19, 20, 45], "linear": [4, 12, 17, 18, 27, 30, 42, 43, 46, 48, 49], "decibel": 4, "noiseless": [4, 7, 11], "measur": [4, 7, 11, 19, 23, 28, 51, 53, 57], "everi": [4, 18], "time": [4, 5, 12, 14, 15, 17, 18, 22, 25, 27, 42, 43, 46, 48, 49], "comput": [4, 6, 7, 8, 10, 11, 19, 22, 23, 26, 28, 29, 30, 37, 51, 53, 54, 57, 60, 61, 63], "from": [4, 5, 8, 10, 12, 17, 18, 21, 22, 23, 25, 27, 28, 30, 42, 43, 46, 48, 49, 51, 53], "itself": 4, "squar": [4, 35], "norm": 4, "100": 4, "y": [4, 7, 11, 19, 21, 22, 31, 45, 52, 60, 61], "91623839": 4, "66229342": 4, "96852259": 4, "07689368": 4, "89296933": 4, "80128101": 4, "34942297": 4, "24031682": 4, "84460601": 4, "96762221": 4, "capac": [4, 7, 11, 19], "c": [4, 7, 11, 14, 18, 19, 37, 63], "dimens": [4, 5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "63": 4, "mu": [5, 14, 15, 42, 49], "tau": [5, 15, 22], "bose": 5, "chaudhuri": 5, "hocquenghem": 5, "bch": [5, 18], "cyclic": [5, 6, 10, 18, 26, 29, 30, 54], "cycliccod": 5, "two": [5, 8, 9, 22, 35, 38, 42, 43, 54], "satisfi": [5, 6, 7, 10, 11, 17, 21, 26, 27, 29, 30, 31, 36, 41, 42, 44, 45, 46, 51, 54], "leq": [5, 6, 7, 11, 14, 32, 36, 41, 42, 44, 45], "design": 5, "error": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49, 63], "correct": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49, 63], "capabl": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "intern": [5, 16], "replac": 5, "true": [5, 6, 10, 18, 25, 26, 27, 29, 30, 54], "t": [5, 14, 15, 22, 24, 32, 36, 41, 44, 47, 63], "refer": [5, 6, 12, 14, 17, 18, 27, 30, 42, 49, 54], "detail": [5, 8, 14, 18, 21, 42], "denot": [5, 10, 14, 22, 23, 42, 53], "ha": [5, 8, 14, 15, 22, 25, 27, 37, 42, 43, 46, 48, 54], "follow": [5, 10, 12, 18, 25, 26, 27, 29, 30, 31, 42, 43, 45, 46, 48, 54], "geq": [5, 6, 10, 17, 26, 27, 29, 30, 46, 51, 54], "redund": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "decod": [5, 12, 15, 17, 18, 23, 25, 27, 28, 42, 43, 46, 48, 49, 51, 53, 63], "identifi": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "type": [5, 8, 12, 17, 18, 25, 27, 37, 42, 43, 46, 48, 49], "berlekamp": 5, "exhaust": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "search": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "exhaustive_search_hard": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "exhaustive_search_soft": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "meggitt": [5, 18], "syndrom": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "syndrome_t": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "lcjr04": [5, 12, 14, 18, 21, 22, 27, 42, 49, 63], "31": [5, 30], "16": [5, 21, 30, 35, 36, 42, 44, 54], "7": [5, 6, 7, 8, 11, 14, 17, 18, 19, 21, 25, 27, 28, 30, 35, 37, 42, 46], "generator_polynomi": [5, 18], "binarypolynomi": [5, 9, 14, 18, 21, 30], "0b1000111110101111": 5, "15": [5, 18, 21, 28, 30, 35, 42], "greater": 5, "than": [5, 25], "21": 5, "codeword_t": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "codeword": [5, 12, 17, 18, 23, 25, 27, 28, 42, 43, 46, 48, 49], "matrix": [5, 7, 11, 12, 14, 17, 18, 19, 22, 25, 27, 42, 43, 46, 48, 49, 54], "whose": [5, 8, 12, 14, 17, 18, 21, 22, 25, 27, 30, 31, 37, 42, 43, 45, 46, 48, 49, 54, 56, 58], "row": [5, 12, 14, 17, 18, 19, 22, 25, 27, 42, 43, 46, 48, 49, 54], "messag": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "represent": [5, 12, 14, 17, 18, 21, 25, 27, 30, 42, 43, 46, 48, 49, 56, 58], "codeword_weight_distribut": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "weight": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "shape": [5, 12, 14, 17, 18, 22, 25, 27, 42, 43, 46, 48, 49], "element": [5, 8, 10, 12, 14, 17, 18, 19, 20, 21, 22, 23, 25, 26, 27, 28, 29, 37, 42, 43, 46, 48, 49, 51, 53, 56, 58, 63], "posit": [5, 6, 7, 10, 11, 12, 14, 17, 18, 19, 20, 21, 23, 25, 26, 27, 29, 30, 42, 43, 46, 48, 49, 53, 54, 57], "w": [5, 12, 17, 18, 25, 27, 41, 42, 43, 46, 48, 49], "ham": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "coset_leader_t": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "coset": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "leader": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "coset_leader_weight_distribut": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "covering_radiu": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "cover": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49, 63], "radiu": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "maximum": [5, 12, 17, 18, 25, 27, 30, 42, 43, 46, 48, 49], "recvword": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "none": [5, 6, 8, 10, 12, 14, 17, 18, 21, 22, 23, 25, 26, 27, 29, 30, 37, 42, 43, 46, 48, 49, 54, 58], "kwarg": [5, 10, 12, 17, 18, 25, 26, 27, 29, 42, 43, 46, 48, 49], "word": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "stand": [5, 8, 12, 17, 18, 25, 27, 37, 42, 43, 46, 48, 49, 56, 58], "log": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49, 57], "repres": [5, 8, 10, 12, 17, 18, 21, 25, 27, 37, 42, 43, 46, 48, 49], "neg": [5, 7, 11, 12, 17, 18, 19, 25, 27, 42, 43, 46, 48, 49, 57], "keyword": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "argument": [5, 8, 12, 17, 18, 25, 27, 37, 42, 43, 46, 48, 49], "pass": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "message_hat": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "encod": [5, 12, 14, 15, 16, 17, 18, 23, 25, 27, 28, 42, 43, 46, 48, 49, 51, 53], "generator_matrix": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "g": [5, 12, 14, 17, 18, 25, 27, 42, 43, 46, 48, 49, 63], "polynomi": [5, 8, 9, 14, 18, 21, 30, 37, 38], "degre": [5, 8, 18, 21, 30, 37, 38], "meggitt_t": [5, 18], "dictionari": [5, 18, 22], "pattern": [5, 18], "xid03": [5, 18, 63], "sec": [5, 7, 11, 14, 18, 19, 21, 22, 27], "message_from_codeword": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "In": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "other": [5, 12, 17, 18, 23, 25, 27, 42, 43, 46, 48, 49, 53], "appli": [5, 12, 17, 18, 22, 25, 27, 42, 43, 46, 48, 49, 54], "invers": [5, 9, 12, 17, 18, 21, 25, 27, 38, 42, 43, 46, 48, 49, 61], "map": [5, 12, 17, 18, 23, 25, 27, 28, 42, 43, 46, 48, 49, 51, 53], "packing_radiu": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "pack": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "also": [5, 12, 14, 17, 18, 21, 22, 25, 27, 30, 35, 42, 43, 46, 48, 49], "lfloor": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "rfloor": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "parity_check_matrix": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "pariti": [5, 12, 17, 18, 25, 27, 42, 43, 46, 48, 49], "h": [5, 7, 11, 12, 17, 18, 19, 20, 24, 25, 27, 32, 36, 41, 42, 43, 44, 46, 47, 48, 49, 57], "parity_check_polynomi": [5, 18], "rate": [5, 12, 17, 18, 23, 25, 27, 28, 42, 43, 46, 48, 49, 51, 53], "r": [5, 6, 10, 12, 17, 18, 22, 23, 25, 26, 27, 28, 29, 30, 42, 43, 45, 46, 48, 49, 51, 53, 54], "barker": 6, "binarysequ": [6, 30, 54], "autocorrel": [6, 10, 26, 29, 30, 54], "ell": [6, 10, 26, 29, 30, 54], "neq": 6, "known": [6, 14, 21, 46], "up": [6, 7, 11, 19, 25, 57], "negat": 6, "revers": [6, 54], "shown": 6, "l": [6, 10, 22, 26, 29, 30, 31, 45, 52, 54], "00": [6, 43], "001": 6, "0010": 6, "0001": 6, "00010": 6, "0001101": 6, "11": [6, 17, 18, 21, 30, 31, 35, 42, 43, 45, 52], "00011101101": 6, "13": [6, 14, 21, 30, 35, 42, 63], "0000011001010": 6, "http": [6, 30, 54], "en": [6, 30, 54], "wikipedia": [6, 30, 54], "org": [6, 30, 54], "wiki": [6, 30, 54], "barker_cod": 6, "polar_sequ": [6, 10, 26, 29, 30, 54], "normal": [6, 10, 26, 29, 30, 54], "fals": [6, 10, 25, 26, 27, 29, 30, 54], "mathbb": [6, 8, 10, 22, 26, 29, 30, 45, 54], "a_": [6, 10, 26, 29, 30, 35, 54], "polar": [6, 10, 26, 29, 30, 54], "format": [6, 10, 12, 18, 24, 26, 29, 30, 32, 36, 41, 44, 47, 54], "even": [6, 10, 26, 29, 30, 54], "contain": [6, 10, 12, 13, 22, 23, 26, 29, 30, 39, 49, 53, 54], "rang": [6, 10, 21, 26, 29, 30, 54], "boolean": [6, 10, 26, 29, 30, 54], "so": [6, 8, 10, 26, 29, 30, 37, 54, 58], "bit_sequ": [6, 10, 23, 26, 28, 29, 30, 51, 53, 54], "cyclic_autocorrel": [6, 10, 26, 29, 30, 54], "tild": [6, 10, 26, 29, 30, 54], "_": [6, 10, 14, 26, 29, 30, 54], "period": [6, 10, 26, 29, 30, 54], "pm": [6, 10, 26, 29, 30, 33, 35, 54], "erasure_prob": 7, "erasur": 7, "bec": 7, "discret": [7, 11, 19, 20, 23, 53], "memoryless": [7, 11, 19, 20], "discretememorylesschannel": [7, 11], "alphabet": [7, 11, 19, 20, 22, 23, 28, 51, 53, 57], "transit": [7, 11, 14, 19], "p_": [7, 11, 14, 19], "mid": [7, 11, 19, 22, 52], "begin": [7, 11, 14, 30, 32, 41, 54], "bmatrix": [7, 11, 14, 54], "epsilon": 7, "end": [7, 11, 14, 22, 30, 32, 41, 49, 54], "25": [7, 11, 14, 23, 28, 36, 44, 52], "75": [7, 20, 36, 44, 52], "input_cardin": [7, 11, 19], "cardin": [7, 11, 19, 20, 22, 23, 28, 51, 53], "mutual_inform": [7, 11, 19], "input_pmf": [7, 11, 19], "mutual": [7, 11, 19], "inform": [7, 11, 12, 15, 19, 22, 25, 27, 46, 48, 49, 63], "between": [7, 11, 19, 52], "entropi": [7, 11, 19, 20], "condit": [7, 11, 19], "By": [7, 11, 19, 57], "logarithm": [7, 11, 19, 20, 21, 57], "p_x": [7, 11, 19, 20, 23, 28, 51, 53, 57], "valid": [7, 11, 19, 57], "dmc": [7, 11, 19], "05": [7, 11, 19], "45": [7, 11, 19], "12381109879798724": [7, 11, 19], "07811610605402552": [7, 11, 19], "output_cardin": [7, 11, 19], "transition_matrix": [7, 11, 14, 19], "coeffici": [8, 30, 37, 38, 56, 58], "finit": [8, 14, 21, 22, 23, 31, 45, 52, 53], "field": [8, 21], "f": [8, 22], "_2": 8, "support": [8, 37], "divis": [8, 37], "exponenti": [8, 37], "poly1": [8, 37], "0b10100": 8, "poly2": [8, 37], "0b11010": 8, "0b1110": 8, "0b111001000": 8, "0b100010000": 8, "leftmost": 8, "highest": 8, "term": 8, "0o32": 8, "26": [8, 37, 56, 58], "There": [8, 49], "altern": 8, "from_coeffici": 8, "from_expon": 8, "width": [8, 37, 41, 58, 59, 62], "fill": [8, 37, 58], "poli": [8, 37], "evalu": [8, 37], "horner": [8, 37], "like": [8, 37], "oper": [8, 37], "subtract": [8, 37], "same": [8, 37, 49, 60, 61], "2751": 8, "111": 8, "324": 8, "expon": [8, 21], "nonzero": [8, 27, 46], "ascend": 8, "classmethod": [8, 30, 37, 38], "gcd": [8, 37], "poly_list": [8, 37], "greatest": [8, 37], "common": [8, 18, 37], "divisor": [8, 37], "lcm": [8, 37], "least": [8, 37], "xgcd": 8, "perform": 8, "extend": [8, 25, 27, 42, 48], "algorithm": [8, 15, 19, 22], "numer": [9, 38], "denomin": [9, 38], "fraction": [9, 37, 38], "mapsto": 10, "expect": [10, 12, 18, 23, 26, 28, 29, 32, 51, 53], "exactli": [10, 26, 29, 54], "crossover_prob": 11, "crossov": [11, 17], "equival": 11, "bernoulli": 11, "random": [11, 57], "variabl": [11, 23, 28, 51, 53, 57], "pr": 11, "18872187554086717": 11, "block": [12, 14, 17, 18, 22, 23, 27, 28, 42, 43, 46, 48, 49, 51, 53, 63], "character": [12, 14, 18], "those": [12, 18], "relat": [12, 14, 18], "top": 12, "respect": [12, 14, 19, 21, 22, 35, 54], "parity_submatrix": 12, "via": [12, 14, 18, 19], "2d": [12, 14, 19, 22], "submatrix": 12, "information_set": 12, "indic": 12, "sublist": 12, "subset": [13, 39], "list": [13, 14, 23, 31, 39, 45, 53, 56], "mod": [13, 39], "1j": 13, "feedforward_polynomi": 14, "feedback_polynomi": [14, 30], "convolut": [14, 15, 16, 49, 63], "feedforward": 14, "vector": 14, "feedback": [14, 30], "column": [14, 19, 22, 27, 46], "q_i": 14, "thei": [14, 31, 45], "transfer": 14, "transform": 14, "domain": 14, "g_": 14, "q_": 14, "constraint": 14, "nu_i": 14, "max": [14, 31], "deg": 14, "ldot": [14, 19, 20, 22, 23, 28, 30, 31, 45, 51, 52, 53, 54], "overal": 14, "nu": 14, "memori": [14, 15, 22, 49], "max_": [14, 19], "space": 14, "state": [14, 15, 16, 22, 30, 49], "describ": 14, "let": [14, 23, 53, 57], "mathbf": [14, 22], "u": [14, 23, 60], "_t": 14, "u_t": 14, "v": [14, 53], "v_t": 14, "s_t": 14, "instant": 14, "Then": 14, "align": 14, "control": [14, 63], "observ": [14, 22], "optim": [14, 28, 51], "small": [14, 17, 63], "12": [14, 18, 21, 22, 25, 30, 35, 42], "0o1": 14, "0o3": 14, "0o5": [14, 15, 16], "0o7": [14, 15, 16], "0o13": [14, 18], "0o17": 14, "0o27": [14, 18], "0o31": 14, "0o53": 14, "0o75": 14, "0o117": 14, "0o155": 14, "0o247": 14, "0o371": 14, "0o561": 14, "0o753": 14, "0o15": 14, "0o25": 14, "0o33": 14, "0o37": 14, "0o47": 14, "0o127": 14, "0o255": 14, "0o331": 14, "0o367": 14, "0o575": 14, "0o623": 14, "0o727": 14, "jz15": [14, 63], "wbr01": [14, 49, 63], "entri": 14, "former": [14, 18, 21, 30], "figur": [14, 22, 30, 31, 45], "yield": [14, 23], "0b1001111": 14, "0b1101101": 14, "79": 14, "109": 14, "num_output_bit": 14, "num_input_bit": 14, "overall_constraint_length": 14, "0b11001": [14, 21], "0b10111": [14, 18], "0b00000": 14, "0b0000": 14, "0b1010": 14, "0b1101": [14, 21], "0o00": 14, "0o12": 14, "23": [14, 18, 25], "10": [14, 15, 18, 19, 20, 21, 25, 30, 35, 42], "dfrac": 14, "constraint_length": 14, "control_matrix": 14, "finite_state_machin": 14, "machin": [14, 22, 30], "memory_ord": 14, "observation_matrix": 14, "state_matrix": 14, "transfer_function_matrix": 14, "binarypolynomialfract": 14, "convolutional_cod": [15, 16, 49], "traceback_length": 15, "initial_st": [15, 16, 22], "input_typ": 15, "stream": [15, 16, 22], "viterbi": [15, 22, 49], "convolutionalcod": [15, 16, 49], "traceback": [15, 22, 57], "path": [15, 22], "At": 15, "choos": [15, 22, 42], "survivor": [15, 22], "best": [15, 22], "metric": [15, 22], "delai": 15, "As": 15, "rule": 15, "thumb": 15, "chosen": [15, 21, 30, 49], "convolutional_decod": 15, "dtype": [15, 25, 37, 42], "initi": [15, 16, 22, 30, 49], "maintain": 16, "across": 16, "convolutional_encod": 16, "cordaro": [17, 63], "wagner": [17, 48, 63], "blockcod": [17, 18, 27, 42, 43, 46, 48, 49], "optimum": [17, 63], "suffici": 17, "cw67": [17, 63], "55": 17, "165": 17, "226": 17, "54": 17, "systemat": [18, 25, 27, 46], "found": 18, "0b1011": [18, 21, 30], "simplex": [18, 27, 42, 46], "0b10100110111": 18, "0o2467": 18, "1335": 18, "golai": [18, 25], "0b101011100011": 18, "0o5343": 18, "2787": 18, "chapter": 18, "both": [18, 35], "bool": [18, 25, 27], "whether": 18, "0b1010010011111": 18, "here": [19, 20, 22], "simplic": [19, 20, 22], "alwai": [19, 20, 22, 30, 49], "taken": [19, 20, 22], "transmit": [19, 50], "arimoto": 19, "blahut": 19, "1616318609548566": 19, "10197835020154389": 19, "dm": 20, "emit": 20, "875": [20, 52], "modulu": 21, "characterist": [21, 31, 45], "gf": 21, "galoi": 21, "0b1100": 21, "0b111": [21, 30], "0b10": 21, "primit": [21, 30], "irreduc": 21, "42": 21, "0b11": [21, 30, 49], "0b1000010001": [21, 30], "0b10000001001": [21, 30], "0b100000000101": [21, 30], "0b10011": [21, 30], "0b1000001010011": [21, 30], "0b100101": [21, 30], "0b10000000011011": [21, 30], "0b1000011": [21, 30], "14": [21, 30, 35, 42], "0b100010001000011": [21, 30], "0b10001001": [21, 30], "0b1000000000000011": [21, 30], "0b100011101": [21, 30], "0b10001000000001011": [21, 30], "static": 21, "conjug": 21, "minimal_polynomi": 21, "minim": [21, 28, 51], "fore": 21, "primitive_el": 21, "alpha": [21, 36, 44], "field1": 21, "alpha1": 21, "0b1": [21, 30, 49], "0b100": 21, "0b110": 21, "0b101": 21, "field2": 21, "alpha2": 21, "next_stat": 22, "meali": 22, "consid": [22, 23, 31, 45, 53, 54], "diagram": 22, "next": 22, "current": 22, "fsm": 22, "forward_backward": 22, "observed_sequ": 22, "metric_funct": 22, "input_prior": 22, "initial_state_distribut": 22, "final_state_distribut": 22, "forward": 22, "backward": 22, "posterior": 22, "x_0": 22, "x_1": 22, "x_": [22, 52], "z_0": 22, "z_1": 22, "z_": 22, "prior": 22, "x_t": 22, "uniform": [22, 52], "over": 22, "final": 22, "input_posterior": 22, "input_edg": 22, "edg": 22, "s_0": 22, "s_1": 22, "associ": 22, "num_input_symbol": 22, "num_output_symbol": 22, "num_stat": 22, "output_edg": 22, "process": 22, "input_sequ": 22, "start": [22, 30, 49], "s_": 22, "y_0": 22, "y_1": 22, "y_": 22, "output_sequ": 22, "final_st": 22, "initial_metr": 22, "find": 22, "hat": 22, "input_sequences_hat": 22, "final_metr": 22, "viterbi_stream": 22, "version": [22, 25, 27], "select": 22, "dict": 22, "updat": 22, "place": 22, "input_sequence_hat": 22, "source_cardin": [23, 28, 51, 53], "prefix": [23, 53], "free": [23, 53], "fix": [23, 28, 51, 53], "some": [23, 53], "enc": [23, 28, 51, 53], "empti": [23, 53], "imag": [23, 53], "lexicograph": [23, 53], "len": [23, 51], "infer": [23, 53], "source_block_s": [23, 28], "pprint": [23, 28, 51, 53], "enc_map": [23, 28, 51, 53], "dec_map": [23, 28, 51, 53], "dec": [23, 28, 51, 53], "symbol_sequ": [23, 28, 51, 53], "quantiti": [23, 28, 51, 53], "bar": [23, 24, 28, 51, 53], "drawn": [23, 28, 51, 53], "first": [23, 28, 51, 53, 54], "half_power_bandwidth": 24, "length_in_symbol": [24, 36, 44, 47], "puls": [24, 32, 33, 36, 41, 44, 47, 50], "formattingpuls": [24, 32, 36, 41, 44, 47], "impuls": [24, 32, 36, 41, 44, 47], "respons": [24, 32, 36, 41, 44, 47], "sqrt": [24, 35, 60], "ln": 24, "half": 24, "bandwidth": 24, "filter": [24, 40, 50], "span": [24, 36, 44, 47], "truncat": [24, 36, 44, 47, 49], "frequency_respons": [24, 32, 36, 41, 44, 47], "frequenc": [24, 32, 36, 41, 44, 47], "impulse_respons": [24, 32, 36, 41, 44, 47], "interv": [24, 32, 36, 41, 44, 47, 61], "form": [25, 27, 37, 46], "note": [25, 27, 42, 43, 46, 48], "perfect": [25, 27], "19": [25, 42], "cannot": 25, "24": 25, "gold": 26, "Not": [26, 29, 31, 40, 55], "implement": [26, 29, 30, 31, 40, 55], "yet": [26, 29, 31, 40, 55], "reduc": [27, 36, 42, 46], "repetit": [27, 42, 43, 48], "repetitioncod": [27, 42, 48], "dual": [27, 43, 46, 48], "simplexcod": [27, 42], "polici": 28, "high": 28, "huffman": 28, "fixedtovariablecod": 28, "when": 28, "move": 28, "combin": 28, "possibl": [28, 49], "low": 28, "kasami": 29, "start_state_polynomi": 30, "regist": 30, "lfsr": 30, "obtain": [30, 48, 49, 54], "tap": 30, "specif": 30, "otherwis": [30, 32, 41], "moreov": [30, 31, 45], "ml": 30, "Such": 30, "have": [30, 49], "2l": 30, "text": [30, 32, 41], "feedback_shift_regist": 30, "maximum_length_sequ": 30, "conveni": 30, "wai": 30, "level": [31, 45, 52], "threshold": [31, 45, 52], "lloyd": 31, "scalar": [31, 45, 52], "quantiz": [31, 45, 52], "v_0": [31, 45, 52], "v_1": [31, 45, 52], "v_": [31, 45, 52], "t_1": [31, 45, 52], "t_2": [31, 45, 52], "t_": [31, 45, 52], "curv": [31, 45], "v_2": [31, 45], "v_3": [31, 45], "v_4": [31, 45], "t_0": [31, 45], "infti": [31, 45, 60], "t_3": [31, 45], "t_4": [31, 45], "t_5": [31, 45], "scalarquant": [31, 52], "linspac": [31, 45, 52], "num": [31, 45, 52], "vstack": [31, 45, 52], "num_level": [31, 45, 52], "manchest": 32, "pam": [33, 35], "real": [33, 39, 61], "realmodul": 33, "line": 33, "2i": 33, "circl": 34, "70710678": 34, "70710678j": 34, "reflected_2d": 35, "quadratur": 35, "qam": 35, "cartesian": 35, "product": 35, "pamodul": 35, "name": 35, "2i_": 35, "i_": 35, "rolloff": [36, 44], "rais": [36, 44], "cosin": [36, 44], "operatornam": [36, 47], "sinc": [36, 47], "co": [36, 44], "roll": [36, 44], "off": [36, 44], "factor": [36, 44], "sincpuls": 36, "ration": [37, 38], "4466": 37, "138": 37, "452": 37, "monomi": [37, 38], "cx": 37, "rationalpolynomi": 38, "rectangular": 41, "halfwai": 41, "rho": 42, "reed": 42, "muller": 42, "rm": 42, "105": 42, "114": 42, "weighted_re": 42, "lengthen": 42, "hammingcod": [42, 46], "singleparitycheckcod": [42, 43, 46], "32": 42, "ones": 42, "17": 42, "29": 42, "reed_partit": 42, "partit": 42, "major": 43, "logic": 43, "majority_log": 43, "root": 44, "sin": [44, 47], "t_l": 45, "v_i": 45, "t_i": 45, "constant": [46, 52], "64": [47, 54], "num_block": 49, "mode": 49, "termin": 49, "n_0": 49, "k_0": 49, "total": 49, "thu": 49, "depend": 49, "emploi": 49, "three": 49, "direct": 49, "immedi": 49, "after": 49, "last": [49, 57], "necessarili": 49, "achiev": 49, "tail": [49, 63], "append": 49, "bite": [49, 63], "bcjr": 49, "viterbi_hard": 49, "viterbi_soft": 49, "samples_per_symbol": 50, "sampl": 50, "code_block_s": [51, 53], "tunstal": 51, "variabletofixedcod": 51, "sourceword": [51, 53], "9473684210526315": [51, 53], "input_peak": 52, "choic": 52, "riser": 52, "separ": 52, "delta": 52, "adjac": 52, "peak": 52, "unsign": 52, "tread": 52, "625": 52, "375": 52, "125": 52, "quantization_step": 52, "step": 52, "possibli": 53, "partial": 53, "index": 54, "walsh": 54, "hadamard": 54, "recurs": 54, "h_": 54, "qquad": 54, "abov": 54, "said": 54, "rearrang": 54, "chang": 54, "h_l": 54, "hadamard_matrix": 54, "walsh_matrix": 54, "dyadic": 54, "walsh_hadamard": 54, "60": 54, "128": 54, "zadoff": 55, "chu": 55, "list_": [56, 58, 59, 62], "int_": [56, 58], "recent": 57, "valueerror": 57, "invalid": 57, "nonneg": 58, "int_x": 60, "84134475": 60, "15865525": 60, "841344746": 61, "158655254": 61, "cjrc81": 63, "georg": 63, "clark": 63, "jr": 63, "bibb": 63, "cain": 63, "springer": 63, "1981": 63, "isbn": 63, "978": 63, "0865429871": 63, "joseph": 63, "terri": 63, "ieee": 63, "ransact": 63, "nformat": 63, "heori": 63, "349": 63, "350": 63, "1967": 63, "thoma": 63, "joi": 63, "theori": 63, "wilei": 63, "intersci": 63, "2nd": 63, "edit": 63, "2006": 63, "0471241959": 63, "rolf": 63, "johannesson": 63, "kamil": 63, "sh": 63, "zigangirov": 63, "fundament": 63, "press": 63, "2015": 63, "0470276839": 63, "shu": 63, "lin": 63, "daniel": 63, "costello": 63, "pearson": 63, "prentic": 63, "hall": 63, "2004": 63, "0130426727": 63, "ps08": 63, "john": 63, "proaki": 63, "masoud": 63, "salehi": 63, "mcgraw": 63, "hill": 63, "5th": 63, "2008": 63, "0072957167": 63, "rl09": 63, "william": 63, "ryan": 63, "classic": 63, "modern": 63, "cambridg": 63, "univers": 63, "1st": 63, "2009": 63, "0521848688": 63, "say06": 63, "khalid": 63, "sayood": 63, "introduct": 63, "data": 63, "compress": 63, "elsevi": 63, "3rd": 63, "0126208627": 63, "christian": 63, "wei\u00df": 63, "bettstett": 63, "sven": 63, "riedel": 63, "parallel": 63, "concaten": 63, "47": 63, "366": 63, "386": 63, "2001": 63, "sebasti\u00e0": 63, "xamb\u00f3": 63, "descamp": 63, "primer": 63, "verlag": 63, "2003": 63, "3642189975": 63}, "objects": {"komm": [[2, 0, 1, "", "APSKModulation"], [3, 0, 1, "", "ASKModulation"], [4, 0, 1, "", "AWGNChannel"], [5, 0, 1, "", "BCHCode"], [6, 0, 1, "", "BarkerSequence"], [7, 0, 1, "", "BinaryErasureChannel"], [8, 0, 1, "", "BinaryPolynomial"], [9, 0, 1, "", "BinaryPolynomialFraction"], [10, 0, 1, "", "BinarySequence"], [11, 0, 1, "", "BinarySymmetricChannel"], [12, 0, 1, "", "BlockCode"], [13, 0, 1, "", "ComplexModulation"], [14, 0, 1, "", "ConvolutionalCode"], [15, 0, 1, "", "ConvolutionalStreamDecoder"], [16, 0, 1, "", "ConvolutionalStreamEncoder"], [17, 0, 1, "", "CordaroWagnerCode"], [18, 0, 1, "", "CyclicCode"], [19, 0, 1, "", "DiscreteMemorylessChannel"], [20, 0, 1, "", "DiscreteMemorylessSource"], [21, 0, 1, "", "FiniteBifield"], [22, 0, 1, "", "FiniteStateMachine"], [23, 0, 1, "", "FixedToVariableCode"], [24, 0, 1, "", "GaussianPulse"], [25, 0, 1, "", "GolayCode"], [26, 0, 1, "", "GoldSequence"], [27, 0, 1, "", "HammingCode"], [28, 0, 1, "", "HuffmanCode"], [29, 0, 1, "", "KasamiSequence"], [30, 0, 1, "", "LFSRSequence"], [31, 0, 1, "", "LloydMaxQuantizer"], [32, 0, 1, "", "ManchesterPulse"], [33, 0, 1, "", "PAModulation"], [34, 0, 1, "", "PSKModulation"], [35, 0, 1, "", "QAModulation"], [36, 0, 1, "", "RaisedCosinePulse"], [37, 0, 1, "", "RationalPolynomial"], [38, 0, 1, "", "RationalPolynomialFraction"], [39, 0, 1, "", "RealModulation"], [40, 0, 1, "", "ReceiveFilter"], [41, 0, 1, "", "RectangularPulse"], [42, 0, 1, "", "ReedMullerCode"], [43, 0, 1, "", "RepetitionCode"], [44, 0, 1, "", "RootRaisedCosinePulse"], [45, 0, 1, "", "ScalarQuantizer"], [46, 0, 1, "", "SimplexCode"], [47, 0, 1, "", "SincPulse"], [48, 0, 1, "", "SingleParityCheckCode"], [49, 0, 1, "", "TerminatedConvolutionalCode"], [50, 0, 1, "", "TransmitFilter"], [51, 0, 1, "", "TunstallCode"], [52, 0, 1, "", "UniformQuantizer"], [53, 0, 1, "", "VariableToFixedCode"], [54, 0, 1, "", "WalshHadamardSequence"], [55, 0, 1, "", "ZadoffChuSequence"], [56, 3, 1, "", "binlist2int"], [57, 3, 1, "", "entropy"], [58, 3, 1, "", "int2binlist"], [59, 3, 1, "", "pack"], [60, 3, 1, "", "qfunc"], [61, 3, 1, "", "qfuncinv"], [62, 3, 1, "", "unpack"]], "komm.APSKModulation": [[2, 1, 1, "", "__init__"], [2, 2, 1, "", "bits_per_symbol"], [2, 1, 1, "", "bits_to_symbols"], [2, 2, 1, "", "channel_snr"], [2, 2, 1, "", "constellation"], [2, 1, 1, "", "demodulate"], [2, 2, 1, "", "energy_per_bit"], [2, 2, 1, "", "energy_per_symbol"], [2, 2, 1, "", "labeling"], [2, 2, 1, "", "minimum_distance"], [2, 1, 1, "", "modulate"], [2, 2, 1, "", "order"], [2, 1, 1, "", "symbols_to_bits"]], "komm.ASKModulation": [[3, 1, 1, "", "__init__"], [3, 2, 1, "", "bits_per_symbol"], [3, 1, 1, "", "bits_to_symbols"], [3, 2, 1, "", "channel_snr"], [3, 2, 1, "", "constellation"], [3, 1, 1, "", "demodulate"], [3, 2, 1, "", "energy_per_bit"], [3, 2, 1, "", "energy_per_symbol"], [3, 2, 1, "", "labeling"], [3, 2, 1, "", "minimum_distance"], [3, 1, 1, "", "modulate"], [3, 2, 1, "", "order"], [3, 1, 1, "", "symbols_to_bits"]], "komm.AWGNChannel": [[4, 1, 1, "", "__init__"], [4, 1, 1, "", "capacity"], [4, 2, 1, "", "signal_power"], [4, 2, 1, "", "snr"]], "komm.BCHCode": [[5, 1, 1, "", "__init__"], [5, 2, 1, "", "codeword_table"], [5, 2, 1, "", "codeword_weight_distribution"], [5, 2, 1, "", "coset_leader_table"], [5, 2, 1, "", "coset_leader_weight_distribution"], [5, 2, 1, "", "covering_radius"], [5, 1, 1, "", "decode"], [5, 2, 1, "", "dimension"], [5, 1, 1, "", "encode"], [5, 2, 1, "", "generator_matrix"], [5, 2, 1, "", "generator_polynomial"], [5, 2, 1, "", "length"], [5, 2, 1, "", "meggitt_table"], [5, 1, 1, "", "message_from_codeword"], [5, 2, 1, "", "minimum_distance"], [5, 2, 1, "", "packing_radius"], [5, 2, 1, "", "parity_check_matrix"], [5, 2, 1, "", "parity_check_polynomial"], [5, 2, 1, "", "rate"], [5, 2, 1, "", "redundancy"]], "komm.BarkerSequence": [[6, 1, 1, "", "__init__"], [6, 1, 1, "", "autocorrelation"], [6, 2, 1, "", "bit_sequence"], [6, 1, 1, "", "cyclic_autocorrelation"], [6, 2, 1, "", "length"], [6, 2, 1, "", "polar_sequence"]], "komm.BinaryErasureChannel": [[7, 1, 1, "", "__init__"], [7, 1, 1, "", "capacity"], [7, 2, 1, "", "erasure_probability"], [7, 2, 1, "", "input_cardinality"], [7, 1, 1, "", "mutual_information"], [7, 2, 1, "", "output_cardinality"], [7, 2, 1, "", "transition_matrix"]], "komm.BinaryPolynomial": [[8, 1, 1, "", "__init__"], [8, 1, 1, "", "coefficients"], [8, 2, 1, "", "degree"], [8, 1, 1, "", "evaluate"], [8, 1, 1, "", "exponents"], [8, 1, 1, "", "from_coefficients"], [8, 1, 1, "", "from_exponents"], [8, 1, 1, "", "gcd"], [8, 1, 1, "", "lcm"], [8, 1, 1, "", "xgcd"]], "komm.BinaryPolynomialFraction": [[9, 1, 1, "", "__init__"], [9, 2, 1, "", "denominator"], [9, 1, 1, "", "inverse"], [9, 2, 1, "", "numerator"]], "komm.BinarySequence": [[10, 1, 1, "", "__init__"], [10, 1, 1, "", "autocorrelation"], [10, 2, 1, "", "bit_sequence"], [10, 1, 1, "", "cyclic_autocorrelation"], [10, 2, 1, "", "length"], [10, 2, 1, "", "polar_sequence"]], "komm.BinarySymmetricChannel": [[11, 1, 1, "", "__init__"], [11, 1, 1, "", "capacity"], [11, 2, 1, "", "crossover_probability"], [11, 2, 1, "", "input_cardinality"], [11, 1, 1, "", "mutual_information"], [11, 2, 1, "", "output_cardinality"], [11, 2, 1, "", "transition_matrix"]], "komm.BlockCode": [[12, 1, 1, "", "__init__"], [12, 2, 1, "", "codeword_table"], [12, 2, 1, "", "codeword_weight_distribution"], [12, 2, 1, "", "coset_leader_table"], [12, 2, 1, "", "coset_leader_weight_distribution"], [12, 2, 1, "", "covering_radius"], [12, 1, 1, "", "decode"], [12, 2, 1, "", "dimension"], [12, 1, 1, "", "encode"], [12, 2, 1, "", "generator_matrix"], [12, 2, 1, "", "length"], [12, 1, 1, "", "message_from_codeword"], [12, 2, 1, "", "minimum_distance"], [12, 2, 1, "", "packing_radius"], [12, 2, 1, "", "parity_check_matrix"], [12, 2, 1, "", "rate"], [12, 2, 1, "", "redundancy"]], "komm.ComplexModulation": [[13, 1, 1, "", "__init__"], [13, 2, 1, "", "bits_per_symbol"], [13, 1, 1, "", "bits_to_symbols"], [13, 2, 1, "", "channel_snr"], [13, 2, 1, "", "constellation"], [13, 1, 1, "", "demodulate"], [13, 2, 1, "", "energy_per_bit"], [13, 2, 1, "", "energy_per_symbol"], [13, 2, 1, "", "labeling"], [13, 2, 1, "", "minimum_distance"], [13, 1, 1, "", "modulate"], [13, 2, 1, "", "order"], [13, 1, 1, "", "symbols_to_bits"]], "komm.ConvolutionalCode": [[14, 1, 1, "", "__init__"], [14, 2, 1, "", "constraint_lengths"], [14, 2, 1, "", "control_matrix"], [14, 2, 1, "", "feedback_polynomials"], [14, 2, 1, "", "feedforward_polynomials"], [14, 2, 1, "", "finite_state_machine"], [14, 2, 1, "", "memory_order"], [14, 2, 1, "", "num_input_bits"], [14, 2, 1, "", "num_output_bits"], [14, 2, 1, "", "observation_matrix"], [14, 2, 1, "", "overall_constraint_length"], [14, 2, 1, "", "state_matrix"], [14, 2, 1, "", "transfer_function_matrix"], [14, 2, 1, "", "transition_matrix"]], "komm.ConvolutionalStreamDecoder": [[15, 1, 1, "", "__init__"]], "komm.ConvolutionalStreamEncoder": [[16, 1, 1, "", "__init__"]], "komm.CordaroWagnerCode": [[17, 1, 1, "", "__init__"], [17, 2, 1, "", "codeword_table"], [17, 2, 1, "", "codeword_weight_distribution"], [17, 2, 1, "", "coset_leader_table"], [17, 2, 1, "", "coset_leader_weight_distribution"], [17, 2, 1, "", "covering_radius"], [17, 1, 1, "", "decode"], [17, 2, 1, "", "dimension"], [17, 1, 1, "", "encode"], [17, 2, 1, "", "generator_matrix"], [17, 2, 1, "", "length"], [17, 1, 1, "", "message_from_codeword"], [17, 2, 1, "", "minimum_distance"], [17, 2, 1, "", "packing_radius"], [17, 2, 1, "", "parity_check_matrix"], [17, 2, 1, "", "rate"], [17, 2, 1, "", "redundancy"]], "komm.CyclicCode": [[18, 1, 1, "", "__init__"], [18, 2, 1, "", "codeword_table"], [18, 2, 1, "", "codeword_weight_distribution"], [18, 2, 1, "", "coset_leader_table"], [18, 2, 1, "", "coset_leader_weight_distribution"], [18, 2, 1, "", "covering_radius"], [18, 1, 1, "", "decode"], [18, 2, 1, "", "dimension"], [18, 1, 1, "", "encode"], [18, 2, 1, "", "generator_matrix"], [18, 2, 1, "", "generator_polynomial"], [18, 2, 1, "", "length"], [18, 2, 1, "", "meggitt_table"], [18, 1, 1, "", "message_from_codeword"], [18, 2, 1, "", "minimum_distance"], [18, 2, 1, "", "packing_radius"], [18, 2, 1, "", "parity_check_matrix"], [18, 2, 1, "", "parity_check_polynomial"], [18, 2, 1, "", "rate"], [18, 2, 1, "", "redundancy"]], "komm.DiscreteMemorylessChannel": [[19, 1, 1, "", "__init__"], [19, 1, 1, "", "capacity"], [19, 2, 1, "", "input_cardinality"], [19, 1, 1, "", "mutual_information"], [19, 2, 1, "", "output_cardinality"], [19, 2, 1, "", "transition_matrix"]], "komm.DiscreteMemorylessSource": [[20, 1, 1, "", "__init__"], [20, 2, 1, "", "cardinality"], [20, 1, 1, "", "entropy"], [20, 2, 1, "", "pmf"]], "komm.FiniteBifield": [[21, 1, 1, "", "__init__"], [21, 2, 1, "", "characteristic"], [21, 1, 1, "", "conjugates"], [21, 2, 1, "", "degree"], [21, 1, 1, "", "inverse"], [21, 1, 1, "", "logarithm"], [21, 1, 1, "", "minimal_polynomial"], [21, 2, 1, "", "modulus"], [21, 2, 1, "", "order"], [21, 1, 1, "", "power"], [21, 2, 1, "", "primitive_element"]], "komm.FiniteStateMachine": [[22, 1, 1, "", "__init__"], [22, 1, 1, "", "forward_backward"], [22, 2, 1, "", "input_edges"], [22, 2, 1, "", "next_states"], [22, 2, 1, "", "num_input_symbols"], [22, 2, 1, "", "num_output_symbols"], [22, 2, 1, "", "num_states"], [22, 2, 1, "", "output_edges"], [22, 2, 1, "", "outputs"], [22, 1, 1, "", "process"], [22, 1, 1, "", "viterbi"], [22, 1, 1, "", "viterbi_streaming"]], "komm.FixedToVariableCode": [[23, 1, 1, "", "__init__"], [23, 2, 1, "", "dec_mapping"], [23, 1, 1, "", "decode"], [23, 2, 1, "", "enc_mapping"], [23, 1, 1, "", "encode"], [23, 1, 1, "", "rate"], [23, 2, 1, "", "source_block_size"], [23, 2, 1, "", "source_cardinality"]], "komm.GaussianPulse": [[24, 1, 1, "", "__init__"], [24, 2, 1, "", "frequency_response"], [24, 2, 1, "", "half_power_bandwidth"], [24, 2, 1, "", "impulse_response"], [24, 2, 1, "", "interval"], [24, 2, 1, "", "length_in_symbols"]], "komm.GolayCode": [[25, 1, 1, "", "__init__"], [25, 2, 1, "", "codeword_table"], [25, 2, 1, "", "codeword_weight_distribution"], [25, 2, 1, "", "coset_leader_table"], [25, 2, 1, "", "coset_leader_weight_distribution"], [25, 2, 1, "", "covering_radius"], [25, 1, 1, "", "decode"], [25, 2, 1, "", "dimension"], [25, 1, 1, "", "encode"], [25, 2, 1, "", "generator_matrix"], [25, 2, 1, "", "length"], [25, 1, 1, "", "message_from_codeword"], [25, 2, 1, "", "minimum_distance"], [25, 2, 1, "", "packing_radius"], [25, 2, 1, "", "parity_check_matrix"], [25, 2, 1, "", "rate"], [25, 2, 1, "", "redundancy"]], "komm.GoldSequence": [[26, 1, 1, "", "__init__"], [26, 1, 1, "", "autocorrelation"], [26, 2, 1, "", "bit_sequence"], [26, 1, 1, "", "cyclic_autocorrelation"], [26, 2, 1, "", "length"], [26, 2, 1, "", "polar_sequence"]], "komm.HammingCode": [[27, 1, 1, "", "__init__"], [27, 2, 1, "", "codeword_table"], [27, 2, 1, "", "codeword_weight_distribution"], [27, 2, 1, "", "coset_leader_table"], [27, 2, 1, "", "coset_leader_weight_distribution"], [27, 2, 1, "", "covering_radius"], [27, 1, 1, "", "decode"], [27, 2, 1, "", "dimension"], [27, 1, 1, "", "encode"], [27, 2, 1, "", "generator_matrix"], [27, 2, 1, "", "length"], [27, 1, 1, "", "message_from_codeword"], [27, 2, 1, "", "minimum_distance"], [27, 2, 1, "", "packing_radius"], [27, 2, 1, "", "parity_check_matrix"], [27, 2, 1, "", "rate"], [27, 2, 1, "", "redundancy"]], "komm.HuffmanCode": [[28, 1, 1, "", "__init__"], [28, 2, 1, "", "dec_mapping"], [28, 1, 1, "", "decode"], [28, 2, 1, "", "enc_mapping"], [28, 1, 1, "", "encode"], [28, 2, 1, "", "pmf"], [28, 1, 1, "", "rate"], [28, 2, 1, "", "source_block_size"], [28, 2, 1, "", "source_cardinality"]], "komm.KasamiSequence": [[29, 1, 1, "", "__init__"], [29, 1, 1, "", "autocorrelation"], [29, 2, 1, "", "bit_sequence"], [29, 1, 1, "", "cyclic_autocorrelation"], [29, 2, 1, "", "length"], [29, 2, 1, "", "polar_sequence"]], "komm.LFSRSequence": [[30, 1, 1, "", "__init__"], [30, 1, 1, "", "autocorrelation"], [30, 2, 1, "", "bit_sequence"], [30, 1, 1, "", "cyclic_autocorrelation"], [30, 2, 1, "", "feedback_polynomial"], [30, 2, 1, "", "length"], [30, 1, 1, "", "maximum_length_sequence"], [30, 2, 1, "", "polar_sequence"], [30, 2, 1, "", "start_state_polynomial"]], "komm.LloydMaxQuantizer": [[31, 1, 1, "", "__init__"], [31, 2, 1, "", "levels"], [31, 2, 1, "", "num_levels"], [31, 2, 1, "", "thresholds"]], "komm.ManchesterPulse": [[32, 1, 1, "", "__init__"], [32, 2, 1, "", "frequency_response"], [32, 2, 1, "", "impulse_response"], [32, 2, 1, "", "interval"]], "komm.PAModulation": [[33, 1, 1, "", "__init__"], [33, 2, 1, "", "bits_per_symbol"], [33, 1, 1, "", "bits_to_symbols"], [33, 2, 1, "", "channel_snr"], [33, 2, 1, "", "constellation"], [33, 1, 1, "", "demodulate"], [33, 2, 1, "", "energy_per_bit"], [33, 2, 1, "", "energy_per_symbol"], [33, 2, 1, "", "labeling"], [33, 2, 1, "", "minimum_distance"], [33, 1, 1, "", "modulate"], [33, 2, 1, "", "order"], [33, 1, 1, "", "symbols_to_bits"]], "komm.PSKModulation": [[34, 1, 1, "", "__init__"], [34, 2, 1, "", "bits_per_symbol"], [34, 1, 1, "", "bits_to_symbols"], [34, 2, 1, "", "channel_snr"], [34, 2, 1, "", "constellation"], [34, 1, 1, "", "demodulate"], [34, 2, 1, "", "energy_per_bit"], [34, 2, 1, "", "energy_per_symbol"], [34, 2, 1, "", "labeling"], [34, 2, 1, "", "minimum_distance"], [34, 1, 1, "", "modulate"], [34, 2, 1, "", "order"], [34, 1, 1, "", "symbols_to_bits"]], "komm.QAModulation": [[35, 1, 1, "", "__init__"], [35, 2, 1, "", "bits_per_symbol"], [35, 1, 1, "", "bits_to_symbols"], [35, 2, 1, "", "channel_snr"], [35, 2, 1, "", "constellation"], [35, 1, 1, "", "demodulate"], [35, 2, 1, "", "energy_per_bit"], [35, 2, 1, "", "energy_per_symbol"], [35, 2, 1, "", "labeling"], [35, 2, 1, "", "minimum_distance"], [35, 1, 1, "", "modulate"], [35, 2, 1, "", "order"], [35, 1, 1, "", "symbols_to_bits"]], "komm.RaisedCosinePulse": [[36, 1, 1, "", "__init__"], [36, 2, 1, "", "frequency_response"], [36, 2, 1, "", "impulse_response"], [36, 2, 1, "", "interval"], [36, 2, 1, "", "length_in_symbols"], [36, 2, 1, "", "rolloff"]], "komm.RationalPolynomial": [[37, 1, 1, "", "__init__"], [37, 1, 1, "", "coefficients"], [37, 2, 1, "", "degree"], [37, 1, 1, "", "evaluate"], [37, 1, 1, "", "gcd"], [37, 1, 1, "", "lcm"], [37, 1, 1, "", "monomial"]], "komm.RationalPolynomialFraction": [[38, 1, 1, "", "__init__"], [38, 2, 1, "", "denominator"], [38, 1, 1, "", "inverse"], [38, 1, 1, "", "monomial"], [38, 2, 1, "", "numerator"]], "komm.RealModulation": [[39, 1, 1, "", "__init__"], [39, 2, 1, "", "bits_per_symbol"], [39, 1, 1, "", "bits_to_symbols"], [39, 2, 1, "", "channel_snr"], [39, 2, 1, "", "constellation"], [39, 1, 1, "", "demodulate"], [39, 2, 1, "", "energy_per_bit"], [39, 2, 1, "", "energy_per_symbol"], [39, 2, 1, "", "labeling"], [39, 2, 1, "", "minimum_distance"], [39, 1, 1, "", "modulate"], [39, 2, 1, "", "order"], [39, 1, 1, "", "symbols_to_bits"]], "komm.ReceiveFilter": [[40, 1, 1, "", "__init__"]], "komm.RectangularPulse": [[41, 1, 1, "", "__init__"], [41, 2, 1, "", "frequency_response"], [41, 2, 1, "", "impulse_response"], [41, 2, 1, "", "interval"], [41, 2, 1, "", "width"]], "komm.ReedMullerCode": [[42, 1, 1, "", "__init__"], [42, 2, 1, "", "codeword_table"], [42, 2, 1, "", "codeword_weight_distribution"], [42, 2, 1, "", "coset_leader_table"], [42, 2, 1, "", "coset_leader_weight_distribution"], [42, 2, 1, "", "covering_radius"], [42, 1, 1, "", "decode"], [42, 2, 1, "", "dimension"], [42, 1, 1, "", "encode"], [42, 2, 1, "", "generator_matrix"], [42, 2, 1, "", "length"], [42, 1, 1, "", "message_from_codeword"], [42, 2, 1, "", "minimum_distance"], [42, 2, 1, "", "mu"], [42, 2, 1, "", "packing_radius"], [42, 2, 1, "", "parity_check_matrix"], [42, 2, 1, "", "rate"], [42, 2, 1, "", "redundancy"], [42, 2, 1, "", "reed_partitions"], [42, 2, 1, "", "rho"]], "komm.RepetitionCode": [[43, 1, 1, "", "__init__"], [43, 2, 1, "", "codeword_table"], [43, 2, 1, "", "codeword_weight_distribution"], [43, 2, 1, "", "coset_leader_table"], [43, 2, 1, "", "coset_leader_weight_distribution"], [43, 2, 1, "", "covering_radius"], [43, 1, 1, "", "decode"], [43, 2, 1, "", "dimension"], [43, 1, 1, "", "encode"], [43, 2, 1, "", "generator_matrix"], [43, 2, 1, "", "length"], [43, 1, 1, "", "message_from_codeword"], [43, 2, 1, "", "minimum_distance"], [43, 2, 1, "", "packing_radius"], [43, 2, 1, "", "parity_check_matrix"], [43, 2, 1, "", "rate"], [43, 2, 1, "", "redundancy"]], "komm.RootRaisedCosinePulse": [[44, 1, 1, "", "__init__"], [44, 2, 1, "", "frequency_response"], [44, 2, 1, "", "impulse_response"], [44, 2, 1, "", "interval"], [44, 2, 1, "", "length_in_symbols"], [44, 2, 1, "", "rolloff"]], "komm.ScalarQuantizer": [[45, 1, 1, "", "__init__"], [45, 2, 1, "", "levels"], [45, 2, 1, "", "num_levels"], [45, 2, 1, "", "thresholds"]], "komm.SimplexCode": [[46, 1, 1, "", "__init__"], [46, 2, 1, "", "codeword_table"], [46, 2, 1, "", "codeword_weight_distribution"], [46, 2, 1, "", "coset_leader_table"], [46, 2, 1, "", "coset_leader_weight_distribution"], [46, 2, 1, "", "covering_radius"], [46, 1, 1, "", "decode"], [46, 2, 1, "", "dimension"], [46, 1, 1, "", "encode"], [46, 2, 1, "", "generator_matrix"], [46, 2, 1, "", "length"], [46, 1, 1, "", "message_from_codeword"], [46, 2, 1, "", "minimum_distance"], [46, 2, 1, "", "packing_radius"], [46, 2, 1, "", "parity_check_matrix"], [46, 2, 1, "", "rate"], [46, 2, 1, "", "redundancy"]], "komm.SincPulse": [[47, 1, 1, "", "__init__"], [47, 2, 1, "", "frequency_response"], [47, 2, 1, "", "impulse_response"], [47, 2, 1, "", "interval"], [47, 2, 1, "", "length_in_symbols"]], "komm.SingleParityCheckCode": [[48, 1, 1, "", "__init__"], [48, 2, 1, "", "codeword_table"], [48, 2, 1, "", "codeword_weight_distribution"], [48, 2, 1, "", "coset_leader_table"], [48, 2, 1, "", "coset_leader_weight_distribution"], [48, 2, 1, "", "covering_radius"], [48, 1, 1, "", "decode"], [48, 2, 1, "", "dimension"], [48, 1, 1, "", "encode"], [48, 2, 1, "", "generator_matrix"], [48, 2, 1, "", "length"], [48, 1, 1, "", "message_from_codeword"], [48, 2, 1, "", "minimum_distance"], [48, 2, 1, "", "packing_radius"], [48, 2, 1, "", "parity_check_matrix"], [48, 2, 1, "", "rate"], [48, 2, 1, "", "redundancy"]], "komm.TerminatedConvolutionalCode": [[49, 1, 1, "", "__init__"], [49, 2, 1, "", "codeword_table"], [49, 2, 1, "", "codeword_weight_distribution"], [49, 2, 1, "", "coset_leader_table"], [49, 2, 1, "", "coset_leader_weight_distribution"], [49, 2, 1, "", "covering_radius"], [49, 1, 1, "", "decode"], [49, 2, 1, "", "dimension"], [49, 1, 1, "", "encode"], [49, 2, 1, "", "generator_matrix"], [49, 2, 1, "", "length"], [49, 1, 1, "", "message_from_codeword"], [49, 2, 1, "", "minimum_distance"], [49, 2, 1, "", "mode"], [49, 2, 1, "", "num_blocks"], [49, 2, 1, "", "packing_radius"], [49, 2, 1, "", "parity_check_matrix"], [49, 2, 1, "", "rate"], [49, 2, 1, "", "redundancy"]], "komm.TransmitFilter": [[50, 1, 1, "", "__init__"], [50, 2, 1, "", "pulse"], [50, 2, 1, "", "samples_per_symbol"]], "komm.TunstallCode": [[51, 1, 1, "", "__init__"], [51, 2, 1, "", "code_block_size"], [51, 2, 1, "", "dec_mapping"], [51, 1, 1, "", "decode"], [51, 2, 1, "", "enc_mapping"], [51, 1, 1, "", "encode"], [51, 2, 1, "", "pmf"], [51, 1, 1, "", "rate"], [51, 2, 1, "", "source_cardinality"]], "komm.UniformQuantizer": [[52, 1, 1, "", "__init__"], [52, 2, 1, "", "choice"], [52, 2, 1, "", "input_peak"], [52, 2, 1, "", "levels"], [52, 2, 1, "", "num_levels"], [52, 2, 1, "", "quantization_step"], [52, 2, 1, "", "thresholds"]], "komm.VariableToFixedCode": [[53, 1, 1, "", "__init__"], [53, 2, 1, "", "code_block_size"], [53, 2, 1, "", "dec_mapping"], [53, 1, 1, "", "decode"], [53, 2, 1, "", "enc_mapping"], [53, 1, 1, "", "encode"], [53, 1, 1, "", "rate"], [53, 2, 1, "", "source_cardinality"]], "komm.WalshHadamardSequence": [[54, 1, 1, "", "__init__"], [54, 1, 1, "", "autocorrelation"], [54, 2, 1, "", "bit_sequence"], [54, 1, 1, "", "cyclic_autocorrelation"], [54, 2, 1, "", "index"], [54, 2, 1, "", "length"], [54, 2, 1, "", "ordering"], [54, 2, 1, "", "polar_sequence"]], "komm.ZadoffChuSequence": [[55, 1, 1, "", "__init__"]]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "function", "Python function"]}, "titleterms": {"glossari": 0, "komm": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62], "algebra": 1, "channel": 1, "error": 1, "control": 1, "block": 1, "code": 1, "convolut": 1, "finit": 1, "state": 1, "machin": 1, "modul": 1, "real": 1, "scheme": 1, "complex": 1, "puls": 1, "format": 1, "filter": 1, "quantiz": 1, "sequenc": 1, "binari": 1, "other": 1, "sourc": 1, "lossless": 1, "util": 1, "apskmodul": 2, "askmodul": 3, "awgnchannel": 4, "bchcode": 5, "barkersequ": 6, "binaryerasurechannel": 7, "binarypolynomi": 8, "binarypolynomialfract": 9, "binarysequ": 10, "binarysymmetricchannel": 11, "blockcod": 12, "complexmodul": 13, "convolutionalcod": 14, "convolutionalstreamdecod": 15, "convolutionalstreamencod": 16, "cordarowagnercod": 17, "cycliccod": 18, "discretememorylesschannel": 19, "discretememorylesssourc": 20, "finitebifield": 21, "finitestatemachin": 22, "transit": 22, "function": 22, "fixedtovariablecod": 23, "gaussianpuls": 24, "golaycod": 25, "goldsequ": 26, "hammingcod": 27, "huffmancod": 28, "kasamisequ": 29, "lfsrsequenc": 30, "lloydmaxquant": 31, "manchesterpuls": 32, "pamodul": 33, "pskmodul": 34, "qamodul": 35, "raisedcosinepuls": 36, "rationalpolynomi": 37, "rationalpolynomialfract": 38, "realmodul": 39, "receivefilt": 40, "rectangularpuls": 41, "reedmullercod": 42, "repetitioncod": 43, "rootraisedcosinepuls": 44, "scalarquant": 45, "simplexcod": 46, "sincpuls": 47, "singleparitycheckcod": 48, "terminatedconvolutionalcod": 49, "transmitfilt": 50, "tunstallcod": 51, "uniformquant": 52, "variabletofixedcod": 53, "walshhadamardsequ": 54, "zadoffchusequ": 55, "binlist2int": 56, "entropi": 57, "int2binlist": 58, "pack": 59, "qfunc": 60, "qfuncinv": 61, "unpack": 62, "refer": 63}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinxcontrib.bibtex": 9, "sphinx": 57}, "alltitles": {"Glossary": [[0, "glossary"]], "Komm": [[1, "komm"]], "Algebra": [[1, "algebra"]], "Channels": [[1, "channels"]], "Error control": [[1, "error-control"]], "Block coding": [[1, "block-coding"]], "Convolutional coding": [[1, "convolutional-coding"]], "Finite-state machine": [[1, "finite-state-machine"]], "Modulation": [[1, "modulation"]], "Real modulation schemes": [[1, "real-modulation-schemes"]], "Complex modulation schemes": [[1, "complex-modulation-schemes"]], "Pulse formatting": [[1, "pulse-formatting"]], "Pulses": [[1, "pulses"]], "Filtering": [[1, "filtering"]], "Quantization": [[1, "quantization"]], "Sequences": [[1, "sequences"]], "Binary sequences": [[1, "binary-sequences"]], "Other sequences": [[1, "other-sequences"]], "Source coding": [[1, "source-coding"]], "Sources": [[1, "sources"]], "Lossless coding": [[1, "lossless-coding"]], "Utilities": [[1, "utilities"]], "komm.APSKModulation": [[2, "komm-apskmodulation"]], "komm.ASKModulation": [[3, "komm-askmodulation"]], "komm.AWGNChannel": [[4, "komm-awgnchannel"]], "komm.BCHCode": [[5, "komm-bchcode"]], "komm.BarkerSequence": [[6, "komm-barkersequence"]], "komm.BinaryErasureChannel": [[7, "komm-binaryerasurechannel"]], "komm.BinaryPolynomial": [[8, "komm-binarypolynomial"]], "komm.BinaryPolynomialFraction": [[9, "komm-binarypolynomialfraction"]], "komm.BinarySequence": [[10, "komm-binarysequence"]], "komm.BinarySymmetricChannel": [[11, "komm-binarysymmetricchannel"]], "komm.BlockCode": [[12, "komm-blockcode"]], "komm.ComplexModulation": [[13, "komm-complexmodulation"]], "komm.ConvolutionalCode": [[14, "komm-convolutionalcode"]], "komm.ConvolutionalStreamDecoder": [[15, "komm-convolutionalstreamdecoder"]], "komm.ConvolutionalStreamEncoder": [[16, "komm-convolutionalstreamencoder"]], "komm.CordaroWagnerCode": [[17, "komm-cordarowagnercode"]], "komm.CyclicCode": [[18, "komm-cycliccode"]], "komm.DiscreteMemorylessChannel": [[19, "komm-discretememorylesschannel"]], "komm.DiscreteMemorylessSource": [[20, "komm-discretememorylesssource"]], "komm.FiniteBifield": [[21, "komm-finitebifield"]], "komm.FiniteStateMachine": [[22, "komm-finitestatemachine"]], "Transition function": [[22, "id4"]], "komm.FixedToVariableCode": [[23, "komm-fixedtovariablecode"]], "komm.GaussianPulse": [[24, "komm-gaussianpulse"]], "komm.GolayCode": [[25, "komm-golaycode"]], "komm.GoldSequence": [[26, "komm-goldsequence"]], "komm.HammingCode": [[27, "komm-hammingcode"]], "komm.HuffmanCode": [[28, "komm-huffmancode"]], "komm.KasamiSequence": [[29, "komm-kasamisequence"]], "komm.LFSRSequence": [[30, "komm-lfsrsequence"]], "komm.LloydMaxQuantizer": [[31, "komm-lloydmaxquantizer"]], "komm.ManchesterPulse": [[32, "komm-manchesterpulse"]], "komm.PAModulation": [[33, "komm-pamodulation"]], "komm.PSKModulation": [[34, "komm-pskmodulation"]], "komm.QAModulation": [[35, "komm-qamodulation"]], "komm.RaisedCosinePulse": [[36, "komm-raisedcosinepulse"]], "komm.RationalPolynomial": [[37, "komm-rationalpolynomial"]], "komm.RationalPolynomialFraction": [[38, "komm-rationalpolynomialfraction"]], "komm.RealModulation": [[39, "komm-realmodulation"]], "komm.ReceiveFilter": [[40, "komm-receivefilter"]], "komm.RectangularPulse": [[41, "komm-rectangularpulse"]], "komm.ReedMullerCode": [[42, "komm-reedmullercode"]], "komm.RepetitionCode": [[43, "komm-repetitioncode"]], "komm.RootRaisedCosinePulse": [[44, "komm-rootraisedcosinepulse"]], "komm.ScalarQuantizer": [[45, "komm-scalarquantizer"]], "komm.SimplexCode": [[46, "komm-simplexcode"]], "komm.SincPulse": [[47, "komm-sincpulse"]], "komm.SingleParityCheckCode": [[48, "komm-singleparitycheckcode"]], "komm.TerminatedConvolutionalCode": [[49, "komm-terminatedconvolutionalcode"]], "komm.TransmitFilter": [[50, "komm-transmitfilter"]], "komm.TunstallCode": [[51, "komm-tunstallcode"]], "komm.UniformQuantizer": [[52, "komm-uniformquantizer"]], "komm.VariableToFixedCode": [[53, "komm-variabletofixedcode"]], "komm.WalshHadamardSequence": [[54, "komm-walshhadamardsequence"]], "komm.ZadoffChuSequence": [[55, "komm-zadoffchusequence"]], "komm.binlist2int": [[56, "komm-binlist2int"]], "komm.entropy": [[57, "komm-entropy"]], "komm.int2binlist": [[58, "komm-int2binlist"]], "komm.pack": [[59, "komm-pack"]], "komm.qfunc": [[60, "komm-qfunc"]], "komm.qfuncinv": [[61, "komm-qfuncinv"]], "komm.unpack": [[62, "komm-unpack"]], "References": [[63, "references"]]}, "indexentries": {"bsc": [[0, "term-BSC"]], "lut": [[0, "term-LUT"]], "msb": [[0, "term-MSB"]], "nrz": [[0, "term-NRZ"]], "rz": [[0, "term-RZ"]], "i.i.d.": [[0, "term-i.i.d."]], "pmf": [[0, "term-pmf"]], "apskmodulation (class in komm)": [[2, "komm.APSKModulation"]], "__init__() (apskmodulation method)": [[2, "komm.APSKModulation.__init__"]], "bits_per_symbol (apskmodulation property)": [[2, "komm.APSKModulation.bits_per_symbol"]], "bits_to_symbols() (apskmodulation method)": [[2, "komm.APSKModulation.bits_to_symbols"]], "channel_snr (apskmodulation property)": [[2, "komm.APSKModulation.channel_snr"]], "constellation (apskmodulation property)": [[2, "komm.APSKModulation.constellation"]], "demodulate() (apskmodulation method)": [[2, "komm.APSKModulation.demodulate"]], "energy_per_bit (apskmodulation property)": [[2, "komm.APSKModulation.energy_per_bit"]], "energy_per_symbol (apskmodulation property)": [[2, "komm.APSKModulation.energy_per_symbol"]], "labeling (apskmodulation property)": [[2, "komm.APSKModulation.labeling"]], "minimum_distance (apskmodulation property)": [[2, "komm.APSKModulation.minimum_distance"]], "modulate() (apskmodulation method)": [[2, "komm.APSKModulation.modulate"]], "order (apskmodulation property)": [[2, "komm.APSKModulation.order"]], "symbols_to_bits() (apskmodulation method)": [[2, "komm.APSKModulation.symbols_to_bits"]], "askmodulation (class in komm)": [[3, "komm.ASKModulation"]], "__init__() (askmodulation method)": [[3, "komm.ASKModulation.__init__"]], "bits_per_symbol (askmodulation property)": [[3, "komm.ASKModulation.bits_per_symbol"]], "bits_to_symbols() (askmodulation method)": [[3, "komm.ASKModulation.bits_to_symbols"]], "channel_snr (askmodulation property)": [[3, "komm.ASKModulation.channel_snr"]], "constellation (askmodulation property)": [[3, "komm.ASKModulation.constellation"]], "demodulate() (askmodulation method)": [[3, "komm.ASKModulation.demodulate"]], "energy_per_bit (askmodulation property)": [[3, "komm.ASKModulation.energy_per_bit"]], "energy_per_symbol (askmodulation property)": [[3, "komm.ASKModulation.energy_per_symbol"]], "labeling (askmodulation property)": [[3, "komm.ASKModulation.labeling"]], "minimum_distance (askmodulation property)": [[3, "komm.ASKModulation.minimum_distance"]], "modulate() (askmodulation method)": [[3, "komm.ASKModulation.modulate"]], "order (askmodulation property)": [[3, "komm.ASKModulation.order"]], "symbols_to_bits() (askmodulation method)": [[3, "komm.ASKModulation.symbols_to_bits"]], "awgnchannel (class in komm)": [[4, "komm.AWGNChannel"]], "__init__() (awgnchannel method)": [[4, "komm.AWGNChannel.__init__"]], "capacity() (awgnchannel method)": [[4, "komm.AWGNChannel.capacity"]], "signal_power (awgnchannel property)": [[4, "komm.AWGNChannel.signal_power"]], "snr (awgnchannel property)": [[4, "komm.AWGNChannel.snr"]], "bchcode (class in komm)": [[5, "komm.BCHCode"]], "__init__() (bchcode method)": [[5, "komm.BCHCode.__init__"]], "codeword_table (bchcode property)": [[5, "komm.BCHCode.codeword_table"]], "codeword_weight_distribution (bchcode property)": [[5, "komm.BCHCode.codeword_weight_distribution"]], "coset_leader_table (bchcode property)": [[5, "komm.BCHCode.coset_leader_table"]], "coset_leader_weight_distribution (bchcode property)": [[5, "komm.BCHCode.coset_leader_weight_distribution"]], "covering_radius (bchcode property)": [[5, "komm.BCHCode.covering_radius"]], "decode() (bchcode method)": [[5, "komm.BCHCode.decode"]], "dimension (bchcode property)": [[5, "komm.BCHCode.dimension"]], "encode() (bchcode method)": [[5, "komm.BCHCode.encode"]], "generator_matrix (bchcode property)": [[5, "komm.BCHCode.generator_matrix"]], "generator_polynomial (bchcode property)": [[5, "komm.BCHCode.generator_polynomial"]], "length (bchcode property)": [[5, "komm.BCHCode.length"]], "meggitt_table (bchcode property)": [[5, "komm.BCHCode.meggitt_table"]], "message_from_codeword() (bchcode method)": [[5, "komm.BCHCode.message_from_codeword"]], "minimum_distance (bchcode property)": [[5, "komm.BCHCode.minimum_distance"]], "packing_radius (bchcode property)": [[5, "komm.BCHCode.packing_radius"]], "parity_check_matrix (bchcode property)": [[5, "komm.BCHCode.parity_check_matrix"]], "parity_check_polynomial (bchcode property)": [[5, "komm.BCHCode.parity_check_polynomial"]], "rate (bchcode property)": [[5, "komm.BCHCode.rate"]], "redundancy (bchcode property)": [[5, "komm.BCHCode.redundancy"]], "barkersequence (class in komm)": [[6, "komm.BarkerSequence"]], "__init__() (barkersequence method)": [[6, "komm.BarkerSequence.__init__"]], "autocorrelation() (barkersequence method)": [[6, "komm.BarkerSequence.autocorrelation"]], "bit_sequence (barkersequence property)": [[6, "komm.BarkerSequence.bit_sequence"]], "cyclic_autocorrelation() (barkersequence method)": [[6, "komm.BarkerSequence.cyclic_autocorrelation"]], "length (barkersequence property)": [[6, "komm.BarkerSequence.length"]], "polar_sequence (barkersequence property)": [[6, "komm.BarkerSequence.polar_sequence"]], "binaryerasurechannel (class in komm)": [[7, "komm.BinaryErasureChannel"]], "__init__() (binaryerasurechannel method)": [[7, "komm.BinaryErasureChannel.__init__"]], "capacity() (binaryerasurechannel method)": [[7, "komm.BinaryErasureChannel.capacity"]], "erasure_probability (binaryerasurechannel property)": [[7, "komm.BinaryErasureChannel.erasure_probability"]], "input_cardinality (binaryerasurechannel property)": [[7, "komm.BinaryErasureChannel.input_cardinality"]], "mutual_information() (binaryerasurechannel method)": [[7, "komm.BinaryErasureChannel.mutual_information"]], "output_cardinality (binaryerasurechannel property)": [[7, "komm.BinaryErasureChannel.output_cardinality"]], "transition_matrix (binaryerasurechannel property)": [[7, "komm.BinaryErasureChannel.transition_matrix"]], "binarypolynomial (class in komm)": [[8, "komm.BinaryPolynomial"]], "__init__() (binarypolynomial method)": [[8, "komm.BinaryPolynomial.__init__"]], "coefficients() (binarypolynomial method)": [[8, "komm.BinaryPolynomial.coefficients"]], "degree (binarypolynomial property)": [[8, "komm.BinaryPolynomial.degree"]], "evaluate() (binarypolynomial method)": [[8, "komm.BinaryPolynomial.evaluate"]], "exponents() (binarypolynomial method)": [[8, "komm.BinaryPolynomial.exponents"]], "from_coefficients() (binarypolynomial class method)": [[8, "komm.BinaryPolynomial.from_coefficients"]], "from_exponents() (binarypolynomial class method)": [[8, "komm.BinaryPolynomial.from_exponents"]], "gcd() (binarypolynomial class method)": [[8, "komm.BinaryPolynomial.gcd"]], "lcm() (binarypolynomial class method)": [[8, "komm.BinaryPolynomial.lcm"]], "xgcd() (binarypolynomial class method)": [[8, "komm.BinaryPolynomial.xgcd"]], "binarypolynomialfraction (class in komm)": [[9, "komm.BinaryPolynomialFraction"]], "__init__() (binarypolynomialfraction method)": [[9, "komm.BinaryPolynomialFraction.__init__"]], "denominator (binarypolynomialfraction property)": [[9, "komm.BinaryPolynomialFraction.denominator"]], "inverse() (binarypolynomialfraction method)": [[9, "komm.BinaryPolynomialFraction.inverse"]], "numerator (binarypolynomialfraction property)": [[9, "komm.BinaryPolynomialFraction.numerator"]], "binarysequence (class in komm)": [[10, "komm.BinarySequence"]], "__init__() (binarysequence method)": [[10, "komm.BinarySequence.__init__"]], "autocorrelation() (binarysequence method)": [[10, "komm.BinarySequence.autocorrelation"]], "bit_sequence (binarysequence property)": [[10, "komm.BinarySequence.bit_sequence"]], "cyclic_autocorrelation() (binarysequence method)": [[10, "komm.BinarySequence.cyclic_autocorrelation"]], "length (binarysequence property)": [[10, "komm.BinarySequence.length"]], "polar_sequence (binarysequence property)": [[10, "komm.BinarySequence.polar_sequence"]], "binarysymmetricchannel (class in komm)": [[11, "komm.BinarySymmetricChannel"]], "__init__() (binarysymmetricchannel method)": [[11, "komm.BinarySymmetricChannel.__init__"]], "capacity() (binarysymmetricchannel method)": [[11, "komm.BinarySymmetricChannel.capacity"]], "crossover_probability (binarysymmetricchannel property)": [[11, "komm.BinarySymmetricChannel.crossover_probability"]], "input_cardinality (binarysymmetricchannel property)": [[11, "komm.BinarySymmetricChannel.input_cardinality"]], "mutual_information() (binarysymmetricchannel method)": [[11, "komm.BinarySymmetricChannel.mutual_information"]], "output_cardinality (binarysymmetricchannel property)": [[11, "komm.BinarySymmetricChannel.output_cardinality"]], "transition_matrix (binarysymmetricchannel property)": [[11, "komm.BinarySymmetricChannel.transition_matrix"]], "blockcode (class in komm)": [[12, "komm.BlockCode"]], "__init__() (blockcode method)": [[12, "komm.BlockCode.__init__"]], "codeword_table (blockcode property)": [[12, "komm.BlockCode.codeword_table"]], "codeword_weight_distribution (blockcode property)": [[12, "komm.BlockCode.codeword_weight_distribution"]], "coset_leader_table (blockcode property)": [[12, "komm.BlockCode.coset_leader_table"]], "coset_leader_weight_distribution (blockcode property)": [[12, "komm.BlockCode.coset_leader_weight_distribution"]], "covering_radius (blockcode property)": [[12, "komm.BlockCode.covering_radius"]], "decode() (blockcode method)": [[12, "komm.BlockCode.decode"]], "dimension (blockcode property)": [[12, "komm.BlockCode.dimension"]], "encode() (blockcode method)": [[12, "komm.BlockCode.encode"]], "generator_matrix (blockcode property)": [[12, "komm.BlockCode.generator_matrix"]], "length (blockcode property)": [[12, "komm.BlockCode.length"]], "message_from_codeword() (blockcode method)": [[12, "komm.BlockCode.message_from_codeword"]], "minimum_distance (blockcode property)": [[12, "komm.BlockCode.minimum_distance"]], "packing_radius (blockcode property)": [[12, "komm.BlockCode.packing_radius"]], "parity_check_matrix (blockcode property)": [[12, "komm.BlockCode.parity_check_matrix"]], "rate (blockcode property)": [[12, "komm.BlockCode.rate"]], "redundancy (blockcode property)": [[12, "komm.BlockCode.redundancy"]], "complexmodulation (class in komm)": [[13, "komm.ComplexModulation"]], "__init__() (complexmodulation method)": [[13, "komm.ComplexModulation.__init__"]], "bits_per_symbol (complexmodulation property)": [[13, "komm.ComplexModulation.bits_per_symbol"]], "bits_to_symbols() (complexmodulation method)": [[13, "komm.ComplexModulation.bits_to_symbols"]], "channel_snr (complexmodulation property)": [[13, "komm.ComplexModulation.channel_snr"]], "constellation (complexmodulation property)": [[13, "komm.ComplexModulation.constellation"]], "demodulate() (complexmodulation method)": [[13, "komm.ComplexModulation.demodulate"]], "energy_per_bit (complexmodulation property)": [[13, "komm.ComplexModulation.energy_per_bit"]], "energy_per_symbol (complexmodulation property)": [[13, "komm.ComplexModulation.energy_per_symbol"]], "labeling (complexmodulation property)": [[13, "komm.ComplexModulation.labeling"]], "minimum_distance (complexmodulation property)": [[13, "komm.ComplexModulation.minimum_distance"]], "modulate() (complexmodulation method)": [[13, "komm.ComplexModulation.modulate"]], "order (complexmodulation property)": [[13, "komm.ComplexModulation.order"]], "symbols_to_bits() (complexmodulation method)": [[13, "komm.ComplexModulation.symbols_to_bits"]], "convolutionalcode (class in komm)": [[14, "komm.ConvolutionalCode"]], "__init__() (convolutionalcode method)": [[14, "komm.ConvolutionalCode.__init__"]], "constraint_lengths (convolutionalcode property)": [[14, "komm.ConvolutionalCode.constraint_lengths"]], "control_matrix (convolutionalcode property)": [[14, "komm.ConvolutionalCode.control_matrix"]], "feedback_polynomials (convolutionalcode property)": [[14, "komm.ConvolutionalCode.feedback_polynomials"]], "feedforward_polynomials (convolutionalcode property)": [[14, "komm.ConvolutionalCode.feedforward_polynomials"]], "finite_state_machine (convolutionalcode property)": [[14, "komm.ConvolutionalCode.finite_state_machine"]], "memory_order (convolutionalcode property)": [[14, "komm.ConvolutionalCode.memory_order"]], "num_input_bits (convolutionalcode property)": [[14, "komm.ConvolutionalCode.num_input_bits"]], "num_output_bits (convolutionalcode property)": [[14, "komm.ConvolutionalCode.num_output_bits"]], "observation_matrix (convolutionalcode property)": [[14, "komm.ConvolutionalCode.observation_matrix"]], "overall_constraint_length (convolutionalcode property)": [[14, "komm.ConvolutionalCode.overall_constraint_length"]], "state_matrix (convolutionalcode property)": [[14, "komm.ConvolutionalCode.state_matrix"]], "transfer_function_matrix (convolutionalcode property)": [[14, "komm.ConvolutionalCode.transfer_function_matrix"]], "transition_matrix (convolutionalcode property)": [[14, "komm.ConvolutionalCode.transition_matrix"]], "convolutionalstreamdecoder (class in komm)": [[15, "komm.ConvolutionalStreamDecoder"]], "__init__() (convolutionalstreamdecoder method)": [[15, "komm.ConvolutionalStreamDecoder.__init__"]], "convolutionalstreamencoder (class in komm)": [[16, "komm.ConvolutionalStreamEncoder"]], "__init__() (convolutionalstreamencoder method)": [[16, "komm.ConvolutionalStreamEncoder.__init__"]], "cordarowagnercode (class in komm)": [[17, "komm.CordaroWagnerCode"]], "__init__() (cordarowagnercode method)": [[17, "komm.CordaroWagnerCode.__init__"]], "codeword_table (cordarowagnercode property)": [[17, "komm.CordaroWagnerCode.codeword_table"]], "codeword_weight_distribution (cordarowagnercode property)": [[17, "komm.CordaroWagnerCode.codeword_weight_distribution"]], "coset_leader_table (cordarowagnercode property)": [[17, "komm.CordaroWagnerCode.coset_leader_table"]], "coset_leader_weight_distribution (cordarowagnercode property)": [[17, "komm.CordaroWagnerCode.coset_leader_weight_distribution"]], "covering_radius (cordarowagnercode property)": [[17, "komm.CordaroWagnerCode.covering_radius"]], "decode() (cordarowagnercode method)": [[17, "komm.CordaroWagnerCode.decode"]], "dimension (cordarowagnercode property)": [[17, "komm.CordaroWagnerCode.dimension"]], "encode() (cordarowagnercode method)": [[17, "komm.CordaroWagnerCode.encode"]], "generator_matrix (cordarowagnercode property)": [[17, "komm.CordaroWagnerCode.generator_matrix"]], "length (cordarowagnercode property)": [[17, "komm.CordaroWagnerCode.length"]], "message_from_codeword() (cordarowagnercode method)": [[17, "komm.CordaroWagnerCode.message_from_codeword"]], "minimum_distance (cordarowagnercode property)": [[17, "komm.CordaroWagnerCode.minimum_distance"]], "packing_radius (cordarowagnercode property)": [[17, "komm.CordaroWagnerCode.packing_radius"]], "parity_check_matrix (cordarowagnercode property)": [[17, "komm.CordaroWagnerCode.parity_check_matrix"]], "rate (cordarowagnercode property)": [[17, "komm.CordaroWagnerCode.rate"]], "redundancy (cordarowagnercode property)": [[17, "komm.CordaroWagnerCode.redundancy"]], "cycliccode (class in komm)": [[18, "komm.CyclicCode"]], "__init__() (cycliccode method)": [[18, "komm.CyclicCode.__init__"]], "codeword_table (cycliccode property)": [[18, "komm.CyclicCode.codeword_table"]], "codeword_weight_distribution (cycliccode property)": [[18, "komm.CyclicCode.codeword_weight_distribution"]], "coset_leader_table (cycliccode property)": [[18, "komm.CyclicCode.coset_leader_table"]], "coset_leader_weight_distribution (cycliccode property)": [[18, "komm.CyclicCode.coset_leader_weight_distribution"]], "covering_radius (cycliccode property)": [[18, "komm.CyclicCode.covering_radius"]], "decode() (cycliccode method)": [[18, "komm.CyclicCode.decode"]], "dimension (cycliccode property)": [[18, "komm.CyclicCode.dimension"]], "encode() (cycliccode method)": [[18, "komm.CyclicCode.encode"]], "generator_matrix (cycliccode property)": [[18, "komm.CyclicCode.generator_matrix"]], "generator_polynomial (cycliccode property)": [[18, "komm.CyclicCode.generator_polynomial"]], "length (cycliccode property)": [[18, "komm.CyclicCode.length"]], "meggitt_table (cycliccode property)": [[18, "komm.CyclicCode.meggitt_table"]], "message_from_codeword() (cycliccode method)": [[18, "komm.CyclicCode.message_from_codeword"]], "minimum_distance (cycliccode property)": [[18, "komm.CyclicCode.minimum_distance"]], "packing_radius (cycliccode property)": [[18, "komm.CyclicCode.packing_radius"]], "parity_check_matrix (cycliccode property)": [[18, "komm.CyclicCode.parity_check_matrix"]], "parity_check_polynomial (cycliccode property)": [[18, "komm.CyclicCode.parity_check_polynomial"]], "rate (cycliccode property)": [[18, "komm.CyclicCode.rate"]], "redundancy (cycliccode property)": [[18, "komm.CyclicCode.redundancy"]], "discretememorylesschannel (class in komm)": [[19, "komm.DiscreteMemorylessChannel"]], "__init__() (discretememorylesschannel method)": [[19, "komm.DiscreteMemorylessChannel.__init__"]], "capacity() (discretememorylesschannel method)": [[19, "komm.DiscreteMemorylessChannel.capacity"]], "input_cardinality (discretememorylesschannel property)": [[19, "komm.DiscreteMemorylessChannel.input_cardinality"]], "mutual_information() (discretememorylesschannel method)": [[19, "komm.DiscreteMemorylessChannel.mutual_information"]], "output_cardinality (discretememorylesschannel property)": [[19, "komm.DiscreteMemorylessChannel.output_cardinality"]], "transition_matrix (discretememorylesschannel property)": [[19, "komm.DiscreteMemorylessChannel.transition_matrix"]], "discretememorylesssource (class in komm)": [[20, "komm.DiscreteMemorylessSource"]], "__init__() (discretememorylesssource method)": [[20, "komm.DiscreteMemorylessSource.__init__"]], "cardinality (discretememorylesssource property)": [[20, "komm.DiscreteMemorylessSource.cardinality"]], "entropy() (discretememorylesssource method)": [[20, "komm.DiscreteMemorylessSource.entropy"]], "pmf (discretememorylesssource property)": [[20, "komm.DiscreteMemorylessSource.pmf"]], "finitebifield (class in komm)": [[21, "komm.FiniteBifield"]], "__init__() (finitebifield method)": [[21, "komm.FiniteBifield.__init__"]], "characteristic (finitebifield property)": [[21, "komm.FiniteBifield.characteristic"]], "conjugates() (finitebifield static method)": [[21, "komm.FiniteBifield.conjugates"]], "degree (finitebifield property)": [[21, "komm.FiniteBifield.degree"]], "inverse() (finitebifield method)": [[21, "komm.FiniteBifield.inverse"]], "logarithm() (finitebifield method)": [[21, "komm.FiniteBifield.logarithm"]], "minimal_polynomial() (finitebifield static method)": [[21, "komm.FiniteBifield.minimal_polynomial"]], "modulus (finitebifield property)": [[21, "komm.FiniteBifield.modulus"]], "order (finitebifield property)": [[21, "komm.FiniteBifield.order"]], "power() (finitebifield method)": [[21, "komm.FiniteBifield.power"]], "primitive_element (finitebifield property)": [[21, "komm.FiniteBifield.primitive_element"]], "finitestatemachine (class in komm)": [[22, "komm.FiniteStateMachine"]], "__init__() (finitestatemachine method)": [[22, "komm.FiniteStateMachine.__init__"]], "forward_backward() (finitestatemachine method)": [[22, "komm.FiniteStateMachine.forward_backward"]], "input_edges (finitestatemachine property)": [[22, "komm.FiniteStateMachine.input_edges"]], "next_states (finitestatemachine property)": [[22, "komm.FiniteStateMachine.next_states"]], "num_input_symbols (finitestatemachine property)": [[22, "komm.FiniteStateMachine.num_input_symbols"]], "num_output_symbols (finitestatemachine property)": [[22, "komm.FiniteStateMachine.num_output_symbols"]], "num_states (finitestatemachine property)": [[22, "komm.FiniteStateMachine.num_states"]], "output_edges (finitestatemachine property)": [[22, "komm.FiniteStateMachine.output_edges"]], "outputs (finitestatemachine property)": [[22, "komm.FiniteStateMachine.outputs"]], "process() (finitestatemachine method)": [[22, "komm.FiniteStateMachine.process"]], "viterbi() (finitestatemachine method)": [[22, "komm.FiniteStateMachine.viterbi"]], "viterbi_streaming() (finitestatemachine method)": [[22, "komm.FiniteStateMachine.viterbi_streaming"]], "fixedtovariablecode (class in komm)": [[23, "komm.FixedToVariableCode"]], "__init__() (fixedtovariablecode method)": [[23, "komm.FixedToVariableCode.__init__"]], "dec_mapping (fixedtovariablecode property)": [[23, "komm.FixedToVariableCode.dec_mapping"]], "decode() (fixedtovariablecode method)": [[23, "komm.FixedToVariableCode.decode"]], "enc_mapping (fixedtovariablecode property)": [[23, "komm.FixedToVariableCode.enc_mapping"]], "encode() (fixedtovariablecode method)": [[23, "komm.FixedToVariableCode.encode"]], "rate() (fixedtovariablecode method)": [[23, "komm.FixedToVariableCode.rate"]], "source_block_size (fixedtovariablecode property)": [[23, "komm.FixedToVariableCode.source_block_size"]], "source_cardinality (fixedtovariablecode property)": [[23, "komm.FixedToVariableCode.source_cardinality"]], "gaussianpulse (class in komm)": [[24, "komm.GaussianPulse"]], "__init__() (gaussianpulse method)": [[24, "komm.GaussianPulse.__init__"]], "frequency_response (gaussianpulse property)": [[24, "komm.GaussianPulse.frequency_response"]], "half_power_bandwidth (gaussianpulse property)": [[24, "komm.GaussianPulse.half_power_bandwidth"]], "impulse_response (gaussianpulse property)": [[24, "komm.GaussianPulse.impulse_response"]], "interval (gaussianpulse property)": [[24, "komm.GaussianPulse.interval"]], "length_in_symbols (gaussianpulse property)": [[24, "komm.GaussianPulse.length_in_symbols"]], "golaycode (class in komm)": [[25, "komm.GolayCode"]], "__init__() (golaycode method)": [[25, "komm.GolayCode.__init__"]], "codeword_table (golaycode property)": [[25, "komm.GolayCode.codeword_table"]], "codeword_weight_distribution (golaycode property)": [[25, "komm.GolayCode.codeword_weight_distribution"]], "coset_leader_table (golaycode property)": [[25, "komm.GolayCode.coset_leader_table"]], "coset_leader_weight_distribution (golaycode property)": [[25, "komm.GolayCode.coset_leader_weight_distribution"]], "covering_radius (golaycode property)": [[25, "komm.GolayCode.covering_radius"]], "decode() (golaycode method)": [[25, "komm.GolayCode.decode"]], "dimension (golaycode property)": [[25, "komm.GolayCode.dimension"]], "encode() (golaycode method)": [[25, "komm.GolayCode.encode"]], "generator_matrix (golaycode property)": [[25, "komm.GolayCode.generator_matrix"]], "length (golaycode property)": [[25, "komm.GolayCode.length"]], "message_from_codeword() (golaycode method)": [[25, "komm.GolayCode.message_from_codeword"]], "minimum_distance (golaycode property)": [[25, "komm.GolayCode.minimum_distance"]], "packing_radius (golaycode property)": [[25, "komm.GolayCode.packing_radius"]], "parity_check_matrix (golaycode property)": [[25, "komm.GolayCode.parity_check_matrix"]], "rate (golaycode property)": [[25, "komm.GolayCode.rate"]], "redundancy (golaycode property)": [[25, "komm.GolayCode.redundancy"]], "goldsequence (class in komm)": [[26, "komm.GoldSequence"]], "__init__() (goldsequence method)": [[26, "komm.GoldSequence.__init__"]], "autocorrelation() (goldsequence method)": [[26, "komm.GoldSequence.autocorrelation"]], "bit_sequence (goldsequence property)": [[26, "komm.GoldSequence.bit_sequence"]], "cyclic_autocorrelation() (goldsequence method)": [[26, "komm.GoldSequence.cyclic_autocorrelation"]], "length (goldsequence property)": [[26, "komm.GoldSequence.length"]], "polar_sequence (goldsequence property)": [[26, "komm.GoldSequence.polar_sequence"]], "hammingcode (class in komm)": [[27, "komm.HammingCode"]], "__init__() (hammingcode method)": [[27, "komm.HammingCode.__init__"]], "codeword_table (hammingcode property)": [[27, "komm.HammingCode.codeword_table"]], "codeword_weight_distribution (hammingcode property)": [[27, "komm.HammingCode.codeword_weight_distribution"]], "coset_leader_table (hammingcode property)": [[27, "komm.HammingCode.coset_leader_table"]], "coset_leader_weight_distribution (hammingcode property)": [[27, "komm.HammingCode.coset_leader_weight_distribution"]], "covering_radius (hammingcode property)": [[27, "komm.HammingCode.covering_radius"]], "decode() (hammingcode method)": [[27, "komm.HammingCode.decode"]], "dimension (hammingcode property)": [[27, "komm.HammingCode.dimension"]], "encode() (hammingcode method)": [[27, "komm.HammingCode.encode"]], "generator_matrix (hammingcode property)": [[27, "komm.HammingCode.generator_matrix"]], "length (hammingcode property)": [[27, "komm.HammingCode.length"]], "message_from_codeword() (hammingcode method)": [[27, "komm.HammingCode.message_from_codeword"]], "minimum_distance (hammingcode property)": [[27, "komm.HammingCode.minimum_distance"]], "packing_radius (hammingcode property)": [[27, "komm.HammingCode.packing_radius"]], "parity_check_matrix (hammingcode property)": [[27, "komm.HammingCode.parity_check_matrix"]], "rate (hammingcode property)": [[27, "komm.HammingCode.rate"]], "redundancy (hammingcode property)": [[27, "komm.HammingCode.redundancy"]], "huffmancode (class in komm)": [[28, "komm.HuffmanCode"]], "__init__() (huffmancode method)": [[28, "komm.HuffmanCode.__init__"]], "dec_mapping (huffmancode property)": [[28, "komm.HuffmanCode.dec_mapping"]], "decode() (huffmancode method)": [[28, "komm.HuffmanCode.decode"]], "enc_mapping (huffmancode property)": [[28, "komm.HuffmanCode.enc_mapping"]], "encode() (huffmancode method)": [[28, "komm.HuffmanCode.encode"]], "pmf (huffmancode property)": [[28, "komm.HuffmanCode.pmf"]], "rate() (huffmancode method)": [[28, "komm.HuffmanCode.rate"]], "source_block_size (huffmancode property)": [[28, "komm.HuffmanCode.source_block_size"]], "source_cardinality (huffmancode property)": [[28, "komm.HuffmanCode.source_cardinality"]], "kasamisequence (class in komm)": [[29, "komm.KasamiSequence"]], "__init__() (kasamisequence method)": [[29, "komm.KasamiSequence.__init__"]], "autocorrelation() (kasamisequence method)": [[29, "komm.KasamiSequence.autocorrelation"]], "bit_sequence (kasamisequence property)": [[29, "komm.KasamiSequence.bit_sequence"]], "cyclic_autocorrelation() (kasamisequence method)": [[29, "komm.KasamiSequence.cyclic_autocorrelation"]], "length (kasamisequence property)": [[29, "komm.KasamiSequence.length"]], "polar_sequence (kasamisequence property)": [[29, "komm.KasamiSequence.polar_sequence"]], "lfsrsequence (class in komm)": [[30, "komm.LFSRSequence"]], "__init__() (lfsrsequence method)": [[30, "komm.LFSRSequence.__init__"]], "autocorrelation() (lfsrsequence method)": [[30, "komm.LFSRSequence.autocorrelation"]], "bit_sequence (lfsrsequence property)": [[30, "komm.LFSRSequence.bit_sequence"]], "cyclic_autocorrelation() (lfsrsequence method)": [[30, "komm.LFSRSequence.cyclic_autocorrelation"]], "feedback_polynomial (lfsrsequence property)": [[30, "komm.LFSRSequence.feedback_polynomial"]], "length (lfsrsequence property)": [[30, "komm.LFSRSequence.length"]], "maximum_length_sequence() (lfsrsequence class method)": [[30, "komm.LFSRSequence.maximum_length_sequence"]], "polar_sequence (lfsrsequence property)": [[30, "komm.LFSRSequence.polar_sequence"]], "start_state_polynomial (lfsrsequence property)": [[30, "komm.LFSRSequence.start_state_polynomial"]], "lloydmaxquantizer (class in komm)": [[31, "komm.LloydMaxQuantizer"]], "__init__() (lloydmaxquantizer method)": [[31, "komm.LloydMaxQuantizer.__init__"]], "levels (lloydmaxquantizer property)": [[31, "komm.LloydMaxQuantizer.levels"]], "num_levels (lloydmaxquantizer property)": [[31, "komm.LloydMaxQuantizer.num_levels"]], "thresholds (lloydmaxquantizer property)": [[31, "komm.LloydMaxQuantizer.thresholds"]], "manchesterpulse (class in komm)": [[32, "komm.ManchesterPulse"]], "__init__() (manchesterpulse method)": [[32, "komm.ManchesterPulse.__init__"]], "frequency_response (manchesterpulse property)": [[32, "komm.ManchesterPulse.frequency_response"]], "impulse_response (manchesterpulse property)": [[32, "komm.ManchesterPulse.impulse_response"]], "interval (manchesterpulse property)": [[32, "komm.ManchesterPulse.interval"]], "pamodulation (class in komm)": [[33, "komm.PAModulation"]], "__init__() (pamodulation method)": [[33, "komm.PAModulation.__init__"]], "bits_per_symbol (pamodulation property)": [[33, "komm.PAModulation.bits_per_symbol"]], "bits_to_symbols() (pamodulation method)": [[33, "komm.PAModulation.bits_to_symbols"]], "channel_snr (pamodulation property)": [[33, "komm.PAModulation.channel_snr"]], "constellation (pamodulation property)": [[33, "komm.PAModulation.constellation"]], "demodulate() (pamodulation method)": [[33, "komm.PAModulation.demodulate"]], "energy_per_bit (pamodulation property)": [[33, "komm.PAModulation.energy_per_bit"]], "energy_per_symbol (pamodulation property)": [[33, "komm.PAModulation.energy_per_symbol"]], "labeling (pamodulation property)": [[33, "komm.PAModulation.labeling"]], "minimum_distance (pamodulation property)": [[33, "komm.PAModulation.minimum_distance"]], "modulate() (pamodulation method)": [[33, "komm.PAModulation.modulate"]], "order (pamodulation property)": [[33, "komm.PAModulation.order"]], "symbols_to_bits() (pamodulation method)": [[33, "komm.PAModulation.symbols_to_bits"]], "pskmodulation (class in komm)": [[34, "komm.PSKModulation"]], "__init__() (pskmodulation method)": [[34, "komm.PSKModulation.__init__"]], "bits_per_symbol (pskmodulation property)": [[34, "komm.PSKModulation.bits_per_symbol"]], "bits_to_symbols() (pskmodulation method)": [[34, "komm.PSKModulation.bits_to_symbols"]], "channel_snr (pskmodulation property)": [[34, "komm.PSKModulation.channel_snr"]], "constellation (pskmodulation property)": [[34, "komm.PSKModulation.constellation"]], "demodulate() (pskmodulation method)": [[34, "komm.PSKModulation.demodulate"]], "energy_per_bit (pskmodulation property)": [[34, "komm.PSKModulation.energy_per_bit"]], "energy_per_symbol (pskmodulation property)": [[34, "komm.PSKModulation.energy_per_symbol"]], "labeling (pskmodulation property)": [[34, "komm.PSKModulation.labeling"]], "minimum_distance (pskmodulation property)": [[34, "komm.PSKModulation.minimum_distance"]], "modulate() (pskmodulation method)": [[34, "komm.PSKModulation.modulate"]], "order (pskmodulation property)": [[34, "komm.PSKModulation.order"]], "symbols_to_bits() (pskmodulation method)": [[34, "komm.PSKModulation.symbols_to_bits"]], "qamodulation (class in komm)": [[35, "komm.QAModulation"]], "__init__() (qamodulation method)": [[35, "komm.QAModulation.__init__"]], "bits_per_symbol (qamodulation property)": [[35, "komm.QAModulation.bits_per_symbol"]], "bits_to_symbols() (qamodulation method)": [[35, "komm.QAModulation.bits_to_symbols"]], "channel_snr (qamodulation property)": [[35, "komm.QAModulation.channel_snr"]], "constellation (qamodulation property)": [[35, "komm.QAModulation.constellation"]], "demodulate() (qamodulation method)": [[35, "komm.QAModulation.demodulate"]], "energy_per_bit (qamodulation property)": [[35, "komm.QAModulation.energy_per_bit"]], "energy_per_symbol (qamodulation property)": [[35, "komm.QAModulation.energy_per_symbol"]], "labeling (qamodulation property)": [[35, "komm.QAModulation.labeling"]], "minimum_distance (qamodulation property)": [[35, "komm.QAModulation.minimum_distance"]], "modulate() (qamodulation method)": [[35, "komm.QAModulation.modulate"]], "order (qamodulation property)": [[35, "komm.QAModulation.order"]], "symbols_to_bits() (qamodulation method)": [[35, "komm.QAModulation.symbols_to_bits"]], "raisedcosinepulse (class in komm)": [[36, "komm.RaisedCosinePulse"]], "__init__() (raisedcosinepulse method)": [[36, "komm.RaisedCosinePulse.__init__"]], "frequency_response (raisedcosinepulse property)": [[36, "komm.RaisedCosinePulse.frequency_response"]], "impulse_response (raisedcosinepulse property)": [[36, "komm.RaisedCosinePulse.impulse_response"]], "interval (raisedcosinepulse property)": [[36, "komm.RaisedCosinePulse.interval"]], "length_in_symbols (raisedcosinepulse property)": [[36, "komm.RaisedCosinePulse.length_in_symbols"]], "rolloff (raisedcosinepulse property)": [[36, "komm.RaisedCosinePulse.rolloff"]], "rationalpolynomial (class in komm)": [[37, "komm.RationalPolynomial"]], "__init__() (rationalpolynomial method)": [[37, "komm.RationalPolynomial.__init__"]], "coefficients() (rationalpolynomial method)": [[37, "komm.RationalPolynomial.coefficients"]], "degree (rationalpolynomial property)": [[37, "komm.RationalPolynomial.degree"]], "evaluate() (rationalpolynomial method)": [[37, "komm.RationalPolynomial.evaluate"]], "gcd() (rationalpolynomial class method)": [[37, "komm.RationalPolynomial.gcd"]], "lcm() (rationalpolynomial class method)": [[37, "komm.RationalPolynomial.lcm"]], "monomial() (rationalpolynomial class method)": [[37, "komm.RationalPolynomial.monomial"]], "rationalpolynomialfraction (class in komm)": [[38, "komm.RationalPolynomialFraction"]], "__init__() (rationalpolynomialfraction method)": [[38, "komm.RationalPolynomialFraction.__init__"]], "denominator (rationalpolynomialfraction property)": [[38, "komm.RationalPolynomialFraction.denominator"]], "inverse() (rationalpolynomialfraction method)": [[38, "komm.RationalPolynomialFraction.inverse"]], "monomial() (rationalpolynomialfraction class method)": [[38, "komm.RationalPolynomialFraction.monomial"]], "numerator (rationalpolynomialfraction property)": [[38, "komm.RationalPolynomialFraction.numerator"]], "realmodulation (class in komm)": [[39, "komm.RealModulation"]], "__init__() (realmodulation method)": [[39, "komm.RealModulation.__init__"]], "bits_per_symbol (realmodulation property)": [[39, "komm.RealModulation.bits_per_symbol"]], "bits_to_symbols() (realmodulation method)": [[39, "komm.RealModulation.bits_to_symbols"]], "channel_snr (realmodulation property)": [[39, "komm.RealModulation.channel_snr"]], "constellation (realmodulation property)": [[39, "komm.RealModulation.constellation"]], "demodulate() (realmodulation method)": [[39, "komm.RealModulation.demodulate"]], "energy_per_bit (realmodulation property)": [[39, "komm.RealModulation.energy_per_bit"]], "energy_per_symbol (realmodulation property)": [[39, "komm.RealModulation.energy_per_symbol"]], "labeling (realmodulation property)": [[39, "komm.RealModulation.labeling"]], "minimum_distance (realmodulation property)": [[39, "komm.RealModulation.minimum_distance"]], "modulate() (realmodulation method)": [[39, "komm.RealModulation.modulate"]], "order (realmodulation property)": [[39, "komm.RealModulation.order"]], "symbols_to_bits() (realmodulation method)": [[39, "komm.RealModulation.symbols_to_bits"]], "receivefilter (class in komm)": [[40, "komm.ReceiveFilter"]], "__init__() (receivefilter method)": [[40, "komm.ReceiveFilter.__init__"]], "rectangularpulse (class in komm)": [[41, "komm.RectangularPulse"]], "__init__() (rectangularpulse method)": [[41, "komm.RectangularPulse.__init__"]], "frequency_response (rectangularpulse property)": [[41, "komm.RectangularPulse.frequency_response"]], "impulse_response (rectangularpulse property)": [[41, "komm.RectangularPulse.impulse_response"]], "interval (rectangularpulse property)": [[41, "komm.RectangularPulse.interval"]], "width (rectangularpulse property)": [[41, "komm.RectangularPulse.width"]], "reedmullercode (class in komm)": [[42, "komm.ReedMullerCode"]], "__init__() (reedmullercode method)": [[42, "komm.ReedMullerCode.__init__"]], "codeword_table (reedmullercode property)": [[42, "komm.ReedMullerCode.codeword_table"]], "codeword_weight_distribution (reedmullercode property)": [[42, "komm.ReedMullerCode.codeword_weight_distribution"]], "coset_leader_table (reedmullercode property)": [[42, "komm.ReedMullerCode.coset_leader_table"]], "coset_leader_weight_distribution (reedmullercode property)": [[42, "komm.ReedMullerCode.coset_leader_weight_distribution"]], "covering_radius (reedmullercode property)": [[42, "komm.ReedMullerCode.covering_radius"]], "decode() (reedmullercode method)": [[42, "komm.ReedMullerCode.decode"]], "dimension (reedmullercode property)": [[42, "komm.ReedMullerCode.dimension"]], "encode() (reedmullercode method)": [[42, "komm.ReedMullerCode.encode"]], "generator_matrix (reedmullercode property)": [[42, "komm.ReedMullerCode.generator_matrix"]], "length (reedmullercode property)": [[42, "komm.ReedMullerCode.length"]], "message_from_codeword() (reedmullercode method)": [[42, "komm.ReedMullerCode.message_from_codeword"]], "minimum_distance (reedmullercode property)": [[42, "komm.ReedMullerCode.minimum_distance"]], "mu (reedmullercode property)": [[42, "komm.ReedMullerCode.mu"]], "packing_radius (reedmullercode property)": [[42, "komm.ReedMullerCode.packing_radius"]], "parity_check_matrix (reedmullercode property)": [[42, "komm.ReedMullerCode.parity_check_matrix"]], "rate (reedmullercode property)": [[42, "komm.ReedMullerCode.rate"]], "redundancy (reedmullercode property)": [[42, "komm.ReedMullerCode.redundancy"]], "reed_partitions (reedmullercode property)": [[42, "komm.ReedMullerCode.reed_partitions"]], "rho (reedmullercode property)": [[42, "komm.ReedMullerCode.rho"]], "repetitioncode (class in komm)": [[43, "komm.RepetitionCode"]], "__init__() (repetitioncode method)": [[43, "komm.RepetitionCode.__init__"]], "codeword_table (repetitioncode property)": [[43, "komm.RepetitionCode.codeword_table"]], "codeword_weight_distribution (repetitioncode property)": [[43, "komm.RepetitionCode.codeword_weight_distribution"]], "coset_leader_table (repetitioncode property)": [[43, "komm.RepetitionCode.coset_leader_table"]], "coset_leader_weight_distribution (repetitioncode property)": [[43, "komm.RepetitionCode.coset_leader_weight_distribution"]], "covering_radius (repetitioncode property)": [[43, "komm.RepetitionCode.covering_radius"]], "decode() (repetitioncode method)": [[43, "komm.RepetitionCode.decode"]], "dimension (repetitioncode property)": [[43, "komm.RepetitionCode.dimension"]], "encode() (repetitioncode method)": [[43, "komm.RepetitionCode.encode"]], "generator_matrix (repetitioncode property)": [[43, "komm.RepetitionCode.generator_matrix"]], "length (repetitioncode property)": [[43, "komm.RepetitionCode.length"]], "message_from_codeword() (repetitioncode method)": [[43, "komm.RepetitionCode.message_from_codeword"]], "minimum_distance (repetitioncode property)": [[43, "komm.RepetitionCode.minimum_distance"]], "packing_radius (repetitioncode property)": [[43, "komm.RepetitionCode.packing_radius"]], "parity_check_matrix (repetitioncode property)": [[43, "komm.RepetitionCode.parity_check_matrix"]], "rate (repetitioncode property)": [[43, "komm.RepetitionCode.rate"]], "redundancy (repetitioncode property)": [[43, "komm.RepetitionCode.redundancy"]], "rootraisedcosinepulse (class in komm)": [[44, "komm.RootRaisedCosinePulse"]], "__init__() (rootraisedcosinepulse method)": [[44, "komm.RootRaisedCosinePulse.__init__"]], "frequency_response (rootraisedcosinepulse property)": [[44, "komm.RootRaisedCosinePulse.frequency_response"]], "impulse_response (rootraisedcosinepulse property)": [[44, "komm.RootRaisedCosinePulse.impulse_response"]], "interval (rootraisedcosinepulse property)": [[44, "komm.RootRaisedCosinePulse.interval"]], "length_in_symbols (rootraisedcosinepulse property)": [[44, "komm.RootRaisedCosinePulse.length_in_symbols"]], "rolloff (rootraisedcosinepulse property)": [[44, "komm.RootRaisedCosinePulse.rolloff"]], "scalarquantizer (class in komm)": [[45, "komm.ScalarQuantizer"]], "__init__() (scalarquantizer method)": [[45, "komm.ScalarQuantizer.__init__"]], "levels (scalarquantizer property)": [[45, "komm.ScalarQuantizer.levels"]], "num_levels (scalarquantizer property)": [[45, "komm.ScalarQuantizer.num_levels"]], "thresholds (scalarquantizer property)": [[45, "komm.ScalarQuantizer.thresholds"]], "simplexcode (class in komm)": [[46, "komm.SimplexCode"]], "__init__() (simplexcode method)": [[46, "komm.SimplexCode.__init__"]], "codeword_table (simplexcode property)": [[46, "komm.SimplexCode.codeword_table"]], "codeword_weight_distribution (simplexcode property)": [[46, "komm.SimplexCode.codeword_weight_distribution"]], "coset_leader_table (simplexcode property)": [[46, "komm.SimplexCode.coset_leader_table"]], "coset_leader_weight_distribution (simplexcode property)": [[46, "komm.SimplexCode.coset_leader_weight_distribution"]], "covering_radius (simplexcode property)": [[46, "komm.SimplexCode.covering_radius"]], "decode() (simplexcode method)": [[46, "komm.SimplexCode.decode"]], "dimension (simplexcode property)": [[46, "komm.SimplexCode.dimension"]], "encode() (simplexcode method)": [[46, "komm.SimplexCode.encode"]], "generator_matrix (simplexcode property)": [[46, "komm.SimplexCode.generator_matrix"]], "length (simplexcode property)": [[46, "komm.SimplexCode.length"]], "message_from_codeword() (simplexcode method)": [[46, "komm.SimplexCode.message_from_codeword"]], "minimum_distance (simplexcode property)": [[46, "komm.SimplexCode.minimum_distance"]], "packing_radius (simplexcode property)": [[46, "komm.SimplexCode.packing_radius"]], "parity_check_matrix (simplexcode property)": [[46, "komm.SimplexCode.parity_check_matrix"]], "rate (simplexcode property)": [[46, "komm.SimplexCode.rate"]], "redundancy (simplexcode property)": [[46, "komm.SimplexCode.redundancy"]], "sincpulse (class in komm)": [[47, "komm.SincPulse"]], "__init__() (sincpulse method)": [[47, "komm.SincPulse.__init__"]], "frequency_response (sincpulse property)": [[47, "komm.SincPulse.frequency_response"]], "impulse_response (sincpulse property)": [[47, "komm.SincPulse.impulse_response"]], "interval (sincpulse property)": [[47, "komm.SincPulse.interval"]], "length_in_symbols (sincpulse property)": [[47, "komm.SincPulse.length_in_symbols"]], "singleparitycheckcode (class in komm)": [[48, "komm.SingleParityCheckCode"]], "__init__() (singleparitycheckcode method)": [[48, "komm.SingleParityCheckCode.__init__"]], "codeword_table (singleparitycheckcode property)": [[48, "komm.SingleParityCheckCode.codeword_table"]], "codeword_weight_distribution (singleparitycheckcode property)": [[48, "komm.SingleParityCheckCode.codeword_weight_distribution"]], "coset_leader_table (singleparitycheckcode property)": [[48, "komm.SingleParityCheckCode.coset_leader_table"]], "coset_leader_weight_distribution (singleparitycheckcode property)": [[48, "komm.SingleParityCheckCode.coset_leader_weight_distribution"]], "covering_radius (singleparitycheckcode property)": [[48, "komm.SingleParityCheckCode.covering_radius"]], "decode() (singleparitycheckcode method)": [[48, "komm.SingleParityCheckCode.decode"]], "dimension (singleparitycheckcode property)": [[48, "komm.SingleParityCheckCode.dimension"]], "encode() (singleparitycheckcode method)": [[48, "komm.SingleParityCheckCode.encode"]], "generator_matrix (singleparitycheckcode property)": [[48, "komm.SingleParityCheckCode.generator_matrix"]], "length (singleparitycheckcode property)": [[48, "komm.SingleParityCheckCode.length"]], "message_from_codeword() (singleparitycheckcode method)": [[48, "komm.SingleParityCheckCode.message_from_codeword"]], "minimum_distance (singleparitycheckcode property)": [[48, "komm.SingleParityCheckCode.minimum_distance"]], "packing_radius (singleparitycheckcode property)": [[48, "komm.SingleParityCheckCode.packing_radius"]], "parity_check_matrix (singleparitycheckcode property)": [[48, "komm.SingleParityCheckCode.parity_check_matrix"]], "rate (singleparitycheckcode property)": [[48, "komm.SingleParityCheckCode.rate"]], "redundancy (singleparitycheckcode property)": [[48, "komm.SingleParityCheckCode.redundancy"]], "terminatedconvolutionalcode (class in komm)": [[49, "komm.TerminatedConvolutionalCode"]], "__init__() (terminatedconvolutionalcode method)": [[49, "komm.TerminatedConvolutionalCode.__init__"]], "codeword_table (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.codeword_table"]], "codeword_weight_distribution (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.codeword_weight_distribution"]], "coset_leader_table (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.coset_leader_table"]], "coset_leader_weight_distribution (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.coset_leader_weight_distribution"]], "covering_radius (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.covering_radius"]], "decode() (terminatedconvolutionalcode method)": [[49, "komm.TerminatedConvolutionalCode.decode"]], "dimension (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.dimension"]], "encode() (terminatedconvolutionalcode method)": [[49, "komm.TerminatedConvolutionalCode.encode"]], "generator_matrix (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.generator_matrix"]], "length (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.length"]], "message_from_codeword() (terminatedconvolutionalcode method)": [[49, "komm.TerminatedConvolutionalCode.message_from_codeword"]], "minimum_distance (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.minimum_distance"]], "mode (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.mode"]], "num_blocks (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.num_blocks"]], "packing_radius (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.packing_radius"]], "parity_check_matrix (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.parity_check_matrix"]], "rate (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.rate"]], "redundancy (terminatedconvolutionalcode property)": [[49, "komm.TerminatedConvolutionalCode.redundancy"]], "transmitfilter (class in komm)": [[50, "komm.TransmitFilter"]], "__init__() (transmitfilter method)": [[50, "komm.TransmitFilter.__init__"]], "pulse (transmitfilter property)": [[50, "komm.TransmitFilter.pulse"]], "samples_per_symbol (transmitfilter property)": [[50, "komm.TransmitFilter.samples_per_symbol"]], "tunstallcode (class in komm)": [[51, "komm.TunstallCode"]], "__init__() (tunstallcode method)": [[51, "komm.TunstallCode.__init__"]], "code_block_size (tunstallcode property)": [[51, "komm.TunstallCode.code_block_size"]], "dec_mapping (tunstallcode property)": [[51, "komm.TunstallCode.dec_mapping"]], "decode() (tunstallcode method)": [[51, "komm.TunstallCode.decode"]], "enc_mapping (tunstallcode property)": [[51, "komm.TunstallCode.enc_mapping"]], "encode() (tunstallcode method)": [[51, "komm.TunstallCode.encode"]], "pmf (tunstallcode property)": [[51, "komm.TunstallCode.pmf"]], "rate() (tunstallcode method)": [[51, "komm.TunstallCode.rate"]], "source_cardinality (tunstallcode property)": [[51, "komm.TunstallCode.source_cardinality"]], "uniformquantizer (class in komm)": [[52, "komm.UniformQuantizer"]], "__init__() (uniformquantizer method)": [[52, "komm.UniformQuantizer.__init__"]], "choice (uniformquantizer property)": [[52, "komm.UniformQuantizer.choice"]], "input_peak (uniformquantizer property)": [[52, "komm.UniformQuantizer.input_peak"]], "levels (uniformquantizer property)": [[52, "komm.UniformQuantizer.levels"]], "num_levels (uniformquantizer property)": [[52, "komm.UniformQuantizer.num_levels"]], "quantization_step (uniformquantizer property)": [[52, "komm.UniformQuantizer.quantization_step"]], "thresholds (uniformquantizer property)": [[52, "komm.UniformQuantizer.thresholds"]], "variabletofixedcode (class in komm)": [[53, "komm.VariableToFixedCode"]], "__init__() (variabletofixedcode method)": [[53, "komm.VariableToFixedCode.__init__"]], "code_block_size (variabletofixedcode property)": [[53, "komm.VariableToFixedCode.code_block_size"]], "dec_mapping (variabletofixedcode property)": [[53, "komm.VariableToFixedCode.dec_mapping"]], "decode() (variabletofixedcode method)": [[53, "komm.VariableToFixedCode.decode"]], "enc_mapping (variabletofixedcode property)": [[53, "komm.VariableToFixedCode.enc_mapping"]], "encode() (variabletofixedcode method)": [[53, "komm.VariableToFixedCode.encode"]], "rate() (variabletofixedcode method)": [[53, "komm.VariableToFixedCode.rate"]], "source_cardinality (variabletofixedcode property)": [[53, "komm.VariableToFixedCode.source_cardinality"]], "walshhadamardsequence (class in komm)": [[54, "komm.WalshHadamardSequence"]], "__init__() (walshhadamardsequence method)": [[54, "komm.WalshHadamardSequence.__init__"]], "autocorrelation() (walshhadamardsequence method)": [[54, "komm.WalshHadamardSequence.autocorrelation"]], "bit_sequence (walshhadamardsequence property)": [[54, "komm.WalshHadamardSequence.bit_sequence"]], "cyclic_autocorrelation() (walshhadamardsequence method)": [[54, "komm.WalshHadamardSequence.cyclic_autocorrelation"]], "index (walshhadamardsequence property)": [[54, "komm.WalshHadamardSequence.index"]], "length (walshhadamardsequence property)": [[54, "komm.WalshHadamardSequence.length"]], "ordering (walshhadamardsequence property)": [[54, "komm.WalshHadamardSequence.ordering"]], "polar_sequence (walshhadamardsequence property)": [[54, "komm.WalshHadamardSequence.polar_sequence"]], "zadoffchusequence (class in komm)": [[55, "komm.ZadoffChuSequence"]], "__init__() (zadoffchusequence method)": [[55, "komm.ZadoffChuSequence.__init__"]], "binlist2int() (in module komm)": [[56, "komm.binlist2int"]], "entropy() (in module komm)": [[57, "komm.entropy"]], "int2binlist() (in module komm)": [[58, "komm.int2binlist"]], "pack() (in module komm)": [[59, "komm.pack"]], "qfunc() (in module komm)": [[60, "komm.qfunc"]], "qfuncinv() (in module komm)": [[61, "komm.qfuncinv"]], "unpack() (in module komm)": [[62, "komm.unpack"]]}})